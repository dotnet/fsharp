<Project>

  <PropertyGroup>
    <GitHubRepositoryName>fsharp</GitHubRepositoryName>
    <SourceBuildManagedOnly>true</SourceBuildManagedOnly>
  </PropertyGroup>

  <!--
    The build script passes in the full path of the sln to build.  This must be overridden in order to build
    the cloned source in the inner build.
  -->
  <Target Name="ConfigureInnerBuildArg" BeforeTargets="GetSourceBuildCommandConfiguration">
    <PropertyGroup>
      <InnerBuildArgs>$(InnerBuildArgs) /p:Projects="$(InnerSourceBuildRepoRoot)\Microsoft.FSharp.Compiler.sln"</InnerBuildArgs>
    </PropertyGroup>
  </Target>

  <!--
    The build script bootstraps some tooling for the build.  Since the inner build is triggerred via msbuild,
    trigger the bootstrapping for the inner build.
  -->
  <Target Name="BuildBootstrap"
          DependsOnTargets="PrepareInnerSourceBuildRepoRoot"
          BeforeTargets="RunInnerSourceBuildCommand">

    <!-- this runs the source-build bootstrap path as described in https://github.com/dotnet/fsharp/blob/95df49e380ea8dbf33653fa4209f89dba29413f5/eng/build.sh#L247
         Note that we *are not* passing -source-build here so we do this bootstrap build in the outer build.
         the important parts here are:
         -bootstrap will build the "Proto" config of F# which includes tools and a bootstrap compiler
         -skipBuild skips the rest of the build
         -bl enables the binlogs for the tools and Proto builds, which make debugging failures here easier
    -->
    <Exec
      Command="./build.sh --bootstrap --skipBuild -bl"
      WorkingDirectory="$(InnerSourceBuildRepoRoot)"
      EnvironmentVariables="@(InnerBuildEnv);DotNetBuildFromSource=true" />
  </Target>

</Project>
