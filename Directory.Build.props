<Project>

  <PropertyGroup>
    <LangVersion Condition="'$(FSharpLangVersion)' != ''">$(FSharpLangVersion)</LangVersion>
    <RepoRoot Condition="'$(RepoRoot)' == ''">$(MSBuildThisFileDirectory)</RepoRoot>
    <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>
  </PropertyGroup>
  <!--
   When developers load the FSharp.Compiler.Service solution we set FSHARPCORE_USE_PACKAGE to true if it hasn't already been set to a value.
   This option ensures that building and testing uses the specified FSharp.Core nuget package instead of the local
   FSharp.Core project.
   We also disable arcade and reset certain artifacts and compiler paths to use default ones
   All settings below can be overriden via CLI switches if needed. -->

  <PropertyGroup Condition="'$(SolutionName)' == 'FSharp.Compiler.Service' and '$(BUILDING_USING_DOTNET)' != 'false'">
      <BUILDING_USING_DOTNET>true</BUILDING_USING_DOTNET>
  </PropertyGroup>

  <!-- Temporary workaround if proj-info is used, allows Ionide's evaluation to work correctly. -->
  <PropertyGroup Condition="'$(BUILDING_USING_DOTNET)' != 'false' and '$(DotnetProjInfo)' == 'true'">
      <BUILDING_USING_DOTNET>true</BUILDING_USING_DOTNET>
  </PropertyGroup>

  <Import Project="$(RepoRoot)/Directory.Build.props.user" Condition = "Exists('$(RepoRoot)/Directory.Build.props.user')" />

  <PropertyGroup Condition="'$(BUILDING_USING_DOTNET)' == 'true'">
    <NetCurrent>net8.0</NetCurrent>
    <BUILDING_WITH_LKG>true</BUILDING_WITH_LKG>
    <BUILD_FROM_SOURCE>true</BUILD_FROM_SOURCE>
    <DisableAutoSetFscCompilerPath>false</DisableAutoSetFscCompilerPath>
    <FSHARPCORE_USE_PACKAGE Condition="'$(FSHARPCORE_USE_PACKAGE)' == ''">true</FSHARPCORE_USE_PACKAGE>
    <DISABLE_ARCADE Condition="'$(DISABLE_ARCADE)' == ''">true</DISABLE_ARCADE>
    <ArtifactsDir>$(MSBuildThisFileDirectory)artifacts/</ArtifactsDir>
    <OutputPath>$(ArtifactsDir)/bin/$(MSBuildProjectName)/$(Configuration)/</OutputPath>
    <IntermediateOutputPath>$(ArtifactsDir)obj/$(MSBuildProjectName)/$(Configuration)/</IntermediateOutputPath>
    <FsLexPath>$(ArtifactsDir)/bin/fslex/$(Configuration)/net8.0/fslex.dll</FsLexPath>
    <FsYaccPath>$(ArtifactsDir)/bin/fsyacc/$(Configuration)/net8.0/fsyacc.dll</FsYaccPath>
  </PropertyGroup>

 <!-- To support source build for the "next" version of .NET without forcing this repo to use it,
      we can utilize arcade's $(NetCurrent) property, and set it ourselves in the arcade-less scenarios. 
      For FCS solution, we set it to one for current dev cycle.
      When used with arcade, and inserting/building for net8 branches, it will set it to net8.0,
      for net9 branches to net9.0 and so on -->
  <PropertyGroup>
    <!-- Once we move to OOP in VS, and major dependants of FCS will move to netcore (not netstandard), we should also support $(NetPrevious) for all releases.
         This will likely include FCS and FSharp.Core as well ash shipped products. -->
   <!-- Right now, it only covers producs we ship (FSC and FSI), not NuGet packages. -->
    <FSharpNetCoreProductTargetFramework>$(NetCurrent)</FSharpNetCoreProductTargetFramework>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)/eng/Versions.props" Condition="'$(DISABLE_ARCADE)' == 'true'"/>

  <Import Project="FSharpBuild.Directory.Build.props" Condition = " '$(FSharpTestCompilerVersion)' == '' "/>
  <Import Project="FSharpTests.Directory.Build.props" Condition = " '$(FSharpTestCompilerVersion)' != '' "/>

  <ItemGroup>
    <!-- If there is a README.md next to a project file, include it (for easier access in the IDE) -->
    <None Include="README.md" Condition="Exists('README.md')" />
  </ItemGroup>

</Project>
