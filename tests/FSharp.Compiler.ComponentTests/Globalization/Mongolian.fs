// #Globalization 
#light

module ᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩ
    type ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ =
        | Bar of int
        | Baz of int
        | Zoo of int
        | Yap of string
        

    let ᠪᠫᠬᠭᠮᠯᠰᠱᠲᠳ = ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ.Bar(1)

    let ᠴᠵᠶᠷᠸᠹᠺᠻᠼᠽ = ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ.Baz(1)

    let ᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇ = ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ.Zoo(3)

    let ᠾᠿᡀᡁᡂᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇᡃᡄᡅᡆ = ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ.Yap("ᡒᡓᡔᡕᡖᡗᡘᡙᡚᡛ")

    type ᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥ(ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ : ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ) =
        let ᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍ = ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ

        member ᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥ.ᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩ(testᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ : ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ) =
            ᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍ |> ignore
            match testᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ with
            | ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ.Bar(_) -> "ᠪᠫᠬᠠᠡᠭᠮᠯᠰᠱᠲᠳ"
            | ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ.Baz(_) -> "ᠴᠵᠶᠠᠡᠷᠸᠹᠺᠻᠼᠽ"
            | ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ.Zoo(_) -> "ᠾᠿᡀᡁᡂᡃᡀᡁᡂᡃᡄᡅᡆᡇ"
            | ᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯ.Yap(_) -> "ᠾᠿᡀᡁᡂᠾᠿᡀᡁᡂᠾᠿᡀᡁᡂᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇᡃᡄᡅᡆᡇ"
        
    let ᡕᡖᡗᡘᡙᡚᡒᡓᡔᡕᡖᡗᡘᡙᡚᡛ = ᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥ(ᠪᠫᠬᠭᠮᠯᠰᠱᠲᠳ)
    let ᡠᡡᡢᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥᡠᡡᡢ = ᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥ(ᠴᠵᠶᠷᠸᠹᠺᠻᠼᠽ)
    let ᡪᡫᡬᡭᡮᡦᡧᡨᡪᡫᡬᡭᡮᡩᡪᡫᡬᡭᡮᡯ = ᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥ(ᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇ)
    let ᢇᢈᢉᢊᢋᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍ = ᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥ(ᠾᠿᡀᡁᡂᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇᡃᡄᡅᡆ)

    let ᢑᢒᢓᢔᢎᢏᢐᢑᢒᢓᢔᢕᢖᢗ() =
        ᡕᡖᡗᡘᡙᡚᡒᡓᡔᡕᡖᡗᡘᡙᡚᡛ.ᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩ(ᠪᠫᠬᠭᠮᠯᠰᠱᠲᠳ) |> ignore
        ᡠᡡᡢᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥᡠᡡᡢ.ᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩ(ᠴᠵᠶᠷᠸᠹᠺᠻᠼᠽ) |> ignore
        ᡪᡫᡬᡭᡮᡦᡧᡨᡪᡫᡬᡭᡮᡩᡪᡫᡬᡭᡮᡯ.ᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩ(ᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇ) |> ignore
        ᢇᢈᢉᢊᢋᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍ.ᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩ(ᠾᠿᡀᡁᡂᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇᡃᡄᡅᡆ) |> ignore
        
        "ᢘᢙᢚᢛᢜᢝᢞᢟᢠᢡᢛᢜᢝᢞᢟ" |> ignore
        """ᢘᢙᢚᢛᢜᢝᢞᢟᢠᢡᢛᢜᢝᢞᢟ"""




