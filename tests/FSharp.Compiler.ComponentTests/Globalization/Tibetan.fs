// #Globalization 
#light

module ꃙꃚꃛꃜꃝꃞꃟꃠꃡꃢ
    type Foo =
        | Bar of int
        | Baz of int
        | Zoo of int
        | Yap of string
        

    let ꃣꃤꃥꃦꃧꃨꃩꃪꃫꃬ = Foo.Bar(1)

    let ꃭꃮꃯꃰꃱꃲꃳꃴꃵꃶ = Foo.Baz(1)

    let ꃷꃸꃹꃺꃻꃼꃽꃾꃿꄀ = Foo.Zoo(3)

    let ꄁꄂꄃꄄꄅꄆꄇꄈꄉꄊ = Foo.Yap("ꄋꄌꄍꄎꄏꄐꄑꄒꄓꄔ")

    type ꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞ(ꄟꄠꄡꄢꄣꄤꄥꄦꄧꄨ : Foo) =
        let ꄩꄪꄫꄬꄭꄮꄯꄰꄱꄲ = ꄟꄠꄡꄢꄣꄤꄥꄦꄧꄨ
        
        member ꄳꄴꄵꄶꄷꄸꄹꄺꄻꄼ.ꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐ(ꄽꄾꄿꅀꅁꅂꅃꅄꅅꅆ : Foo) =
            ꄩꄪꄫꄬꄭꄮꄯꄰꄱꄲ |> ignore
            match ꄽꄾꄿꅀꅁꅂꅃꅄꅅꅆ with
            | Foo.Bar(_) -> "ꅑꅒꅓꅔꅕꅖꅗꅘꅙꅚ"
            | Foo.Baz(_) -> "ꅛꅜꅝꅞꅟꅠꅡꅢꅣꅤ"
            | Foo.Zoo(_) -> "ꅥꅦꅧꅨꅩꅪꅫꅬꅭꅮ"
            | Foo.Yap(_) -> "ꅯꅰꅱꅲꅳꅴꅵꅶꅷꅸ"
        
    let ꅹꅺꅻꅼꅽꅾꅿꆀꆁꆂ = ꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞ(ꃣꃤꃥꃦꃧꃨꃩꃪꃫꃬ)
    let ꆃꆄꆅꆆꆇꆈꆉꆊꆋꆌ = ꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞ(ꃭꃮꃯꃰꃱꃲꃳꃴꃵꃶ)
    let ꆍꆎꆏꆐꆑꆒꆓꆔꆕꆖ = ꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞ(ꃷꃸꃹꃺꃻꃼꃽꃾꃿꄀ)
    let ꆗꆘꆙꆚꆛꆜꆝꆞꆟꆠ = ꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞ(ꄁꄂꄃꄄꄅꄆꄇꄈꄉꄊ)

    let ꆡꆢꆣꆤꆥꆦꆧꆨꆩꆪ() =
        ꅹꅺꅻꅼꅽꅾꅿꆀꆁꆂ.ꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐ(ꃣꃤꃥꃦꃧꃨꃩꃪꃫꃬ) |> ignore
        ꆃꆄꆅꆆꆇꆈꆉꆊꆋꆌ.ꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐ(ꃭꃮꃯꃰꃱꃲꃳꃴꃵꃶ) |> ignore
        ꆍꆎꆏꆐꆑꆒꆓꆔꆕꆖ.ꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐ(ꃷꃸꃹꃺꃻꃼꃽꃾꃿꄀ) |> ignore
        ꆗꆘꆙꆚꆛꆜꆝꆞꆟꆠ.ꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐ(ꄁꄂꄃꄄꄅꄆꄇꄈꄉꄊ) |> ignore
        
        "ꆫꆬꆭꆮꆯꆰꆱꆲꆳꆴ" |> ignore
        """ꆫꆬꆭꆮꆯꆰꆱꆲꆳꆴ"""




