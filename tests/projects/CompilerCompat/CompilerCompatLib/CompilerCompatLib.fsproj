<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    
    <!-- Package properties for NuGet pack -->
    <IsPackable>true</IsPackable>
    <PackageId>CompilerCompatLib</PackageId>
    <Version>1.0.0</Version>
    <Authors>Test</Authors>
    <Description>Test library for compiler compatibility tests</Description>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="LibBuildInfo.fs" />
    <Compile Include="Library.fs" />
  </ItemGroup>

  <!-- When building with local compiler, include FSharp.Core in the package so consumers can find it -->
  <ItemGroup Condition="'$(LoadLocalFSharpBuild)' == 'True'">
    <Content Include="$(LocalFSharpCompilerPath)/artifacts/bin/FSharp.Core/$(LocalFSharpCompilerConfiguration)/netstandard2.0/FSharp.Core.dll">
      <PackagePath>lib/$(TargetFramework)</PackagePath>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Pack>true</Pack>
    </Content>
  </ItemGroup>

  <Target Name="GenerateLibBuildInfo" BeforeTargets="BeforeCompile">
    <PropertyGroup>
      <IsLocalBuildValue Condition="'$(LoadLocalFSharpBuild)' == 'True'">true</IsLocalBuildValue>
      <IsLocalBuildValue Condition="'$(LoadLocalFSharpBuild)' != 'True'">false</IsLocalBuildValue>
      <CleanDotnetFscCompilerPath Condition="'$(DotnetFscCompilerPath)' != ''">$(DotnetFscCompilerPath.Replace('&quot;', ''))</CleanDotnetFscCompilerPath>
      <CleanDotnetFscCompilerPath Condition="'$(DotnetFscCompilerPath)' == ''">N/A</CleanDotnetFscCompilerPath>
    </PropertyGroup>
    <WriteLinesToFile
      File="LibBuildInfo.fs"
      Overwrite="true"
      Lines="namespace CompilerCompatLib
module LibBuildInfo =
    let sdkVersion = &quot;$(NETCoreSdkVersion)&quot;
    let fsharpCompilerPath = &quot;$(FscToolPath)\$(FscToolExe)&quot;
    let dotnetFscCompilerPath = &quot;$(CleanDotnetFscCompilerPath)&quot;
    let isLocalBuild = $(IsLocalBuildValue)" />
  </Target>

</Project>