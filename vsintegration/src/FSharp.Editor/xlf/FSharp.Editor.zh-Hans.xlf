<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="zh-Hans" original="../FSharp.Editor.resx">
    <body>
      <trans-unit id="AddMissingEqualsToTypeDefinition">
        <source>Add missing '=' to type definition</source>
        <target state="translated">将缺少的 "=" 添加到类型定义</target>
        <note />
      </trans-unit>
      <trans-unit id="AddMissingFunKeyword">
        <source>Add missing 'fun' keyword</source>
        <target state="translated">添加缺少的 "fun" 关键字</target>
        <note />
      </trans-unit>
      <trans-unit id="AddMissingInstanceMemberParameter">
        <source>Add missing instance member parameter</source>
        <target state="translated">添加缺少的实例成员参数</target>
        <note />
      </trans-unit>
      <trans-unit id="AddNewKeyword">
        <source>Add 'new' keyword</source>
        <target state="translated">添加“新”关键字</target>
        <note />
      </trans-unit>
      <trans-unit id="AddReturnTypeAnnotation">
        <source>Add return type annotation</source>
        <target state="translated">添加返回类型批注</target>
        <note />
      </trans-unit>
      <trans-unit id="AddTypeAnnotation">
        <source>Add type annotation</source>
        <target state="translated">添加类型注释</target>
        <note />
      </trans-unit>
      <trans-unit id="AdvancedPageKeywords">
        <source>Block Structure Guides;
Show structure guidelines for F# code;
Outlining;
Show outlining and collapsible nodes for F# code;
Inline hints;
Display inline type hints (preview);
Display return type hints (preview);
Display inline parameter name hints (preview);
Use Transparent Compiler (experimental);
Live Buffers;
Use live (unsaved) buffers for analysis</source>
        <target state="translated">块结构指南；
显示 F# 代码的结构指南；
概述；
显示 F# 代码的大纲显示节点和可折叠节点；
内联提示；
显示内联类型提示(预览)；
显示返回类型提示(预览)；
显示内联参数名称提示(预览版)；
使用透明编译器(实验性)；
实时缓冲区；
使用实时(未保存)缓冲区进行分析</target>
        <note />
      </trans-unit>
      <trans-unit id="ChangeEqualsInFieldTypeToColon">
        <source>Use ':' for type in field declaration</source>
        <target state="translated">对字段声明中的类型使用 ":"</target>
        <note />
      </trans-unit>
      <trans-unit id="CodeFixesPageKeywords">
        <source>Simplify names (remove unnecessary qualifiers);
Always place open statements at the top level;
Remove unused open statements;
Analyze and suggest fixes for unused values;
Suggest names for unresolved identifiers;</source>
        <target state="translated">简化名称(移除不必要的限定符)；
始终将 open 语句置于顶层；
移除未使用的 open 语句；
分析未使用的值并提出修复建议；
建议适用于未解析标识符的名称；</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertCSharpUsingToFSharpOpen">
        <source>Convert C# 'using' to F# 'open'</source>
        <target state="translated">将 C# “using” 转换为 F# “open”</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToAnonymousRecord">
        <source>Convert to Anonymous Record</source>
        <target state="translated">转换为匿名记录</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToNotEqualsEqualityExpression">
        <source>Use '&lt;&gt;' for inequality check</source>
        <target state="translated">使用 "&lt;&gt;" 进行不相等检查</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToSingleEqualsEqualityExpression">
        <source>Use '=' for equality check</source>
        <target state="translated">使用 "=" 进行同等性检查</target>
        <note />
      </trans-unit>
      <trans-unit id="ChangePrefixNegationToInfixSubtraction">
        <source>Use subtraction instead of negation</source>
        <target state="translated">使用减法代替求反</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableLocalValuesClassificationType">
        <source>F# Disposable Values (locals)</source>
        <target state="translated">F# 可释放值(局部值)</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableTopLevelValuesClassificationType">
        <source>F# Disposable Values (top-level)</source>
        <target state="translated">F# 可释放值(顶级)</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableTypesClassificationType">
        <source>F# Disposable Types</source>
        <target state="translated">F# 可释放类型</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpFunctionsClassificationType">
        <source>F# Functions</source>
        <target state="translated">F# 函数</target>
        <note />
      </trans-unit>
      <trans-unit id="FormattingPageKeywords">
        <source>Re-format indentation on paste (Experimental)</source>
        <target state="translated">粘贴时重新设置缩进格式(实验)</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementInterface">
        <source>Implement interface</source>
        <target state="translated">实现接口</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementInterfaceWithoutTypeAnnotation">
        <source>Implement interface without type annotation</source>
        <target state="translated">无类型批注的实现接口</target>
        <note />
      </trans-unit>
      <trans-unit id="IntelliSensePageKeywords">
        <source>Completion Lists;
Show completion list after a character is deleted;
Show completion list after a character is typed;
Show symbols in unopened namespaces;
Enter key behavior;
Never add new line on enter;
Only add new line on enter after end of fully typed word;
Always add new line on enter;</source>
        <target state="translated">完成列表；
删除字符后显示完成列表；
键入字符后显示完成列表；
在未打开的命名空间中显示符号；
Enter 键行为；
从不在 Enter 上添加新行；
仅在完全键入的单词结尾后在 Enter 上添加新行；
始终在 Enter 上添加新行；</target>
        <note />
      </trans-unit>
      <trans-unit id="MakeDeclarationMutable">
        <source>Make declaration 'mutable'</source>
        <target state="translated">将声明设为“可变”</target>
        <note />
      </trans-unit>
      <trans-unit id="MakeOuterBindingRecursive">
        <source>Make '{0}' recursive</source>
        <target state="translated">使 "{0}" 递归</target>
        <note />
      </trans-unit>
      <trans-unit id="PerformancePageKeywords">
        <source>F# Project and Caching Performance Options;
Enable in-memory cross project references;
Enable_partial_type_checking;
IntelliSense Performance Options;
Enable stale data for IntelliSense features;
Time until stale results are used (in milliseconds);
Parallelization (requires restart);
Enable parallel type checking with signature files;
Enable parallel reference resolution;
Enable fast find references &amp; rename (restart required);
Cache parsing results (experimental)</source>
        <target state="translated">F# 项目和缓存性能选项；
启用内存中跨项目引用；
Enable_partial_type_checking;
IntelliSense 性能选项；
为 IntelliSense 功能启用过时数据；
使用过时结果前等待的时间(以毫秒计)；
并行化(需要重启)；
使用签名文件启用并行类型检查；
启用并行引用解析；
启用快速查找引用和重命名(需要重新启动)；
缓存分析结果(实验性)</target>
        <note />
      </trans-unit>
      <trans-unit id="PrefixValueNameWithUnderscore">
        <source>Prefix '{0}' with underscore</source>
        <target state="translated">带下划线的前缀“{0}”</target>
        <note />
      </trans-unit>
      <trans-unit id="QuickInfoPageKeywords">
        <source>Formatting;
Preferred description width in characters;
Format signature to the given width by adding line breaks conforming with F# syntax rules;
Navigation links;
Show navigation links as;
Solid underline;
Dot underline;
Dash underline;
Show remarks in Quick Info</source>
        <target state="translated">格式设置；
以字符为单位的首选说明宽度；
通过添加符合 F# 语法规则的换行符，将签名设置为给定宽度的格式；
导航链接；
导航链接显示方式；
实线下划线；
点下划线；
短线下划线；
在快速信息中显示备注</target>
        <note />
      </trans-unit>
      <trans-unit id="RemarksHeader">
        <source>Remarks:</source>
        <target state="translated">注解:</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveReturn">
        <source>Remove 'return'</source>
        <target state="translated">删除 "return"</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveReturnBang">
        <source>Remove 'return!'</source>
        <target state="translated">删除 "return!"</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveUnnecessaryParentheses">
        <source>Remove unnecessary parentheses</source>
        <target state="translated">移除不必要的括号</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveUnusedBinding">
        <source>Remove unused binding</source>
        <target state="translated">删除未使用的绑定</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveYield">
        <source>Remove 'yield'</source>
        <target state="translated">删除 "yield"</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveYieldBang">
        <source>Remove 'yield!'</source>
        <target state="translated">删除 "yield!"</target>
        <note />
      </trans-unit>
      <trans-unit id="RenameValueToUnderscore">
        <source>Rename '{0}' to '_'</source>
        <target state="translated">将“{0}”重命名为“_”</target>
        <note />
      </trans-unit>
      <trans-unit id="ReturnsHeader">
        <source>Returns:</source>
        <target state="translated">返回:</target>
        <note />
      </trans-unit>
      <trans-unit id="SimplifyName">
        <source>Simplify name</source>
        <target state="translated">简化名称</target>
        <note />
      </trans-unit>
      <trans-unit id="NameCanBeSimplified">
        <source>Name can be simplified.</source>
        <target state="translated">可以简化名称。</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpMutableVarsClassificationType">
        <source>F# Mutable Variables / Reference Cells</source>
        <target state="translated">F# 可变变量/引用单元格</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpPrintfFormatClassificationType">
        <source>F# Printf Format</source>
        <target state="translated">F# Printf 格式</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpPropertiesClassificationType">
        <source>F# Properties</source>
        <target state="translated">F# 属性</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveUnusedOpens">
        <source>Remove unused open declarations</source>
        <target state="translated">删除未使用的 open 声明</target>
        <note />
      </trans-unit>
      <trans-unit id="UnexpectedEqualsInFieldExpectedColon">
        <source>Unexpected symbol '=' in field declaration. Expected ':' or other token.</source>
        <target state="translated">字段声明中出现意外的符号 "="。应为 ":" 或其他标记。</target>
        <note />
      </trans-unit>
      <trans-unit id="UnusedOpens">
        <source>Open declaration can be removed.</source>
        <target state="translated">可删除 open 声明。</target>
        <note />
      </trans-unit>
      <trans-unit id="6008">
        <source>IntelliSense</source>
        <target state="translated">IntelliSense</target>
        <note />
      </trans-unit>
      <trans-unit id="6009">
        <source>QuickInfo</source>
        <target state="translated">QuickInfo</target>
        <note />
      </trans-unit>
      <trans-unit id="AddAssemblyReference">
        <source>Add an assembly reference to '{0}'</source>
        <target state="translated">添加对“{0}”的程序集引用</target>
        <note />
      </trans-unit>
      <trans-unit id="AddProjectReference">
        <source>Add a project reference to '{0}'</source>
        <target state="translated">添加对“{0}”的项目引用</target>
        <note />
      </trans-unit>
      <trans-unit id="6010">
        <source>Code Fixes</source>
        <target state="translated">代码修补程序</target>
        <note />
      </trans-unit>
      <trans-unit id="6011">
        <source>Performance</source>
        <target state="translated">性能</target>
        <note />
      </trans-unit>
      <trans-unit id="TheValueIsUnused">
        <source>The value is unused</source>
        <target state="translated">未使用该值</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotDetermineSymbol">
        <source>Cannot determine the symbol under the caret</source>
        <target state="translated">无法确定插入点下的符号</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotNavigateUnknown">
        <source>Cannot navigate to the requested location</source>
        <target state="translated">无法转到到所需位置</target>
        <note />
      </trans-unit>
      <trans-unit id="LocatingSymbol">
        <source>Locating the symbol under the caret...</source>
        <target state="translated">正在确定插入点下的符号...</target>
        <note />
      </trans-unit>
      <trans-unit id="NavigatingTo">
        <source>Navigating to symbol...</source>
        <target state="translated">正在转到符号...</target>
        <note />
      </trans-unit>
      <trans-unit id="NavigateToFailed">
        <source>Navigate to symbol failed: {0}</source>
        <target state="translated">未能转到符号: {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="ExceptionsHeader">
        <source>Exceptions:</source>
        <target state="translated">异常:</target>
        <note />
      </trans-unit>
      <trans-unit id="GenericParametersHeader">
        <source>Generic parameters:</source>
        <target state="translated">泛型参数:</target>
        <note />
      </trans-unit>
      <trans-unit id="RenameValueToDoubleUnderscore">
        <source>Rename '{0}' to '__'</source>
        <target state="translated">将“{0}”重命名为“__”</target>
        <note />
      </trans-unit>
      <trans-unit id="6012">
        <source>Advanced</source>
        <target state="translated">高级</target>
        <note />
      </trans-unit>
      <trans-unit id="6014">
        <source>Formatting</source>
        <target state="translated">正在格式化</target>
        <note />
      </trans-unit>
      <trans-unit id="UseFSharpLambda">
        <source>Use F# lambda syntax</source>
        <target state="translated">使用 F# lambda 语法</target>
        <note />
      </trans-unit>
      <trans-unit id="UseMutationWhenValueIsMutable">
        <source>Use '&lt;-' to mutate value</source>
        <target state="translated">使用 "&lt;-" 来更改值</target>
        <note />
      </trans-unit>
      <trans-unit id="UseNameof">
        <source>Use 'nameof'</source>
        <target state="translated">使用 "nameof"</target>
        <note />
      </trans-unit>
      <trans-unit id="UseTripleQuotedInterpolation">
        <source>Use triple quoted string interpolation.</source>
        <target state="translated">使用三引号字符串内插。</target>
        <note />
      </trans-unit>
      <trans-unit id="UseUpcastKeyword">
        <source>Use 'upcast'</source>
        <target state="translated">使用“向上转换”</target>
        <note />
      </trans-unit>
      <trans-unit id="UseUpcastOperator">
        <source>Use ':&gt;' operator</source>
        <target state="translated">使用 ":&gt;" 运算符</target>
        <note />
      </trans-unit>
      <trans-unit id="UseNotForNegation">
        <source>Use 'not' to negate expression</source>
        <target state="translated">使用 "not" 对表达式求反</target>
        <note />
      </trans-unit>
      <trans-unit id="UseValueInsteadOfDeref">
        <source>Use '.Value' to dereference expression</source>
        <target state="translated">对取消引用表达式使用 ".Value"</target>
        <note />
      </trans-unit>
      <trans-unit id="WrapExpressionInParentheses">
        <source>Wrap expression in parentheses</source>
        <target state="translated">将表达式用括号括起来</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>