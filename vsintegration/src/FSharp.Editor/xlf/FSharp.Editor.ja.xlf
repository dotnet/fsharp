<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ja" original="../FSharp.Editor.resx">
    <body>
      <trans-unit id="AddMissingEqualsToTypeDefinition">
        <source>Add missing '=' to type definition</source>
        <target state="translated">不足している '=' を型定義に追加します</target>
        <note />
      </trans-unit>
      <trans-unit id="AddMissingFunKeyword">
        <source>Add missing 'fun' keyword</source>
        <target state="translated">不足している 'fun' キーワードを追加する</target>
        <note />
      </trans-unit>
      <trans-unit id="AddMissingInstanceMemberParameter">
        <source>Add missing instance member parameter</source>
        <target state="translated">見つからないインスタンス メンバー パラメーターを追加する</target>
        <note />
      </trans-unit>
      <trans-unit id="AddNewKeyword">
        <source>Add 'new' keyword</source>
        <target state="translated">'new' キーワードを追加する</target>
        <note />
      </trans-unit>
      <trans-unit id="AddReturnTypeAnnotation">
        <source>Add return type annotation</source>
        <target state="translated">戻り値の型の注釈の追加</target>
        <note />
      </trans-unit>
      <trans-unit id="AddTypeAnnotation">
        <source>Add type annotation</source>
        <target state="translated">型の注釈の追加</target>
        <note />
      </trans-unit>
      <trans-unit id="AdvancedPageKeywords">
        <source>Block Structure Guides;
Show structure guidelines for F# code;
Outlining;
Show outlining and collapsible nodes for F# code;
Inline hints;
Display inline type hints (preview);
Display return type hints (preview);
Display inline parameter name hints (preview);
Use Transparent Compiler (experimental);
Live Buffers;
Use live (unsaved) buffers for analysis</source>
        <target state="translated">ブロック構造のガイド;
F# コードの構造のガイドラインを表示;
アウトライン表示;
F# コードのアウトラインおよび折りたたみ可能なノードを表示する;
インライン ヒント;
インライン型のヒントを表示する (プレビュー);
戻り値型のヒントを表示する (プレビュー);
インライン パラメーター名のヒントを表示 (プレビュー);
Transparent Compiler を使用する (試験段階);
ライブ バッファー;
分析にライブ (未保存) バッファーを使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="ChangeEqualsInFieldTypeToColon">
        <source>Use ':' for type in field declaration</source>
        <target state="translated">フィールド宣言の型に ':' を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="CodeFixesPageKeywords">
        <source>Simplify names (remove unnecessary qualifiers);
Always place open statements at the top level;
Remove unused open statements;
Analyze and suggest fixes for unused values;
Suggest names for unresolved identifiers;</source>
        <target state="translated">名前を簡略化します (不要な修飾子を削除する);
常に open ステートメントを最上位レベルに配置します。
未使用の open ステートメントを削除します。
未使用の値の修正を分析して提案します。
未解決の識別子の名前を提案します;</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertCSharpUsingToFSharpOpen">
        <source>Convert C# 'using' to F# 'open'</source>
        <target state="translated">C# 'using' を F# 'open' に変換する</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToAnonymousRecord">
        <source>Convert to Anonymous Record</source>
        <target state="translated">匿名レコードに変換</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToNotEqualsEqualityExpression">
        <source>Use '&lt;&gt;' for inequality check</source>
        <target state="translated">非等値のチェックには '&lt;&gt;' を使用します</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToSingleEqualsEqualityExpression">
        <source>Use '=' for equality check</source>
        <target state="translated">等値性のチェックには '=' を使用します</target>
        <note />
      </trans-unit>
      <trans-unit id="ChangePrefixNegationToInfixSubtraction">
        <source>Use subtraction instead of negation</source>
        <target state="translated">否定の代わりに減算を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableLocalValuesClassificationType">
        <source>F# Disposable Values (locals)</source>
        <target state="translated">F# の破棄可能な値 (ローカル)</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableTopLevelValuesClassificationType">
        <source>F# Disposable Values (top-level)</source>
        <target state="translated">F# の破棄可能な値 (トップレベル)</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableTypesClassificationType">
        <source>F# Disposable Types</source>
        <target state="translated">F# 破棄可能な型</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpFunctionsClassificationType">
        <source>F# Functions</source>
        <target state="translated">F# 関数</target>
        <note />
      </trans-unit>
      <trans-unit id="FormattingPageKeywords">
        <source>Re-format indentation on paste (Experimental)</source>
        <target state="translated">貼り付け時にインデントを再フォーマットする (試験段階)</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementInterface">
        <source>Implement interface</source>
        <target state="translated">インターフェイスを実装します。</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementInterfaceWithoutTypeAnnotation">
        <source>Implement interface without type annotation</source>
        <target state="translated">型の注釈を指定しないでインターフェイスを実装する</target>
        <note />
      </trans-unit>
      <trans-unit id="IntelliSensePageKeywords">
        <source>Completion Lists;
Show completion list after a character is deleted;
Show completion list after a character is typed;
Show symbols in unopened namespaces;
Enter key behavior;
Never add new line on enter;
Only add new line on enter after end of fully typed word;
Always add new line on enter;</source>
        <target state="translated">入力候補リスト;
文字が削除された後に完了リストを表示します。
文字が入力された後に入力候補一覧を表示します。
開かれていない名前空間にシンボルを表示します。
キーの動作を入力します。
Enter キーで改行を追加しないでください。
完全に入力された単語の末尾の後に Enter キーで改行を追加します。
常に Enter キーを押して新しい行を追加します。</target>
        <note />
      </trans-unit>
      <trans-unit id="MakeDeclarationMutable">
        <source>Make declaration 'mutable'</source>
        <target state="translated">'mutable' を宣言する</target>
        <note />
      </trans-unit>
      <trans-unit id="MakeOuterBindingRecursive">
        <source>Make '{0}' recursive</source>
        <target state="translated">'{0}' を再帰的にする</target>
        <note />
      </trans-unit>
      <trans-unit id="PerformancePageKeywords">
        <source>F# Project and Caching Performance Options;
Enable in-memory cross project references;
Enable_partial_type_checking;
IntelliSense Performance Options;
Enable stale data for IntelliSense features;
Time until stale results are used (in milliseconds);
Parallelization (requires restart);
Enable parallel type checking with signature files;
Enable parallel reference resolution;
Enable fast find references &amp; rename (restart required);
Cache parsing results (experimental)</source>
        <target state="translated">F# プロジェクトとキャッシュのパフォーマンス オプション;
メモリ内のプロジェクト間参照を有効にする;
Enable_partial_type_checking;
IntelliSense のパフォーマンス オプション;
IntelliSense 機能に対して古いデータを有効にする;
古い結果が使用されるまでの時間 (ミリ秒);
並列化 (再起動が必要);
署名ファイルを使用して並列型チェックを有効にする;
並列参照解決を有効にする;
高速検索参照と名前の変更を有効にする (再起動が必要);
キャッシュ解析の結果 (試験段階)</target>
        <note />
      </trans-unit>
      <trans-unit id="PrefixValueNameWithUnderscore">
        <source>Prefix '{0}' with underscore</source>
        <target state="translated">アンダースコアが含まれているプレフィックス '{0}'</target>
        <note />
      </trans-unit>
      <trans-unit id="QuickInfoPageKeywords">
        <source>Formatting;
Preferred description width in characters;
Format signature to the given width by adding line breaks conforming with F# syntax rules;
Navigation links;
Show navigation links as;
Solid underline;
Dot underline;
Dash underline;
Show remarks in Quick Info</source>
        <target state="translated">書式設定;
優先する説明の文字幅;
F# 構文規則に準拠した改行を追加して、署名を指定された幅に書式設定する;
ナビゲーション リンク;
次としてナビゲーション リンクを表示;
実線の下線;
ドットの下線;
破線の下線;
クイック ヒントに注釈を表示する</target>
        <note />
      </trans-unit>
      <trans-unit id="RemarksHeader">
        <source>Remarks:</source>
        <target state="translated">注釈:</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveReturn">
        <source>Remove 'return'</source>
        <target state="translated">'return' の削除</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveReturnBang">
        <source>Remove 'return!'</source>
        <target state="translated">'return!' の削除</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveUnnecessaryParentheses">
        <source>Remove unnecessary parentheses</source>
        <target state="translated">不要なかっこの削除</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveUnusedBinding">
        <source>Remove unused binding</source>
        <target state="translated">使用されていないバインドの削除</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveYield">
        <source>Remove 'yield'</source>
        <target state="translated">'yield' の削除</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveYieldBang">
        <source>Remove 'yield!'</source>
        <target state="translated">'yield!' の削除</target>
        <note />
      </trans-unit>
      <trans-unit id="RenameValueToUnderscore">
        <source>Rename '{0}' to '_'</source>
        <target state="translated">'{0}' から '_' に名前を変更する</target>
        <note />
      </trans-unit>
      <trans-unit id="ReturnsHeader">
        <source>Returns:</source>
        <target state="translated">戻り値:</target>
        <note />
      </trans-unit>
      <trans-unit id="SimplifyName">
        <source>Simplify name</source>
        <target state="translated">名前を単純化する</target>
        <note />
      </trans-unit>
      <trans-unit id="NameCanBeSimplified">
        <source>Name can be simplified.</source>
        <target state="translated">名前を簡略化できます。</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpMutableVarsClassificationType">
        <source>F# Mutable Variables / Reference Cells</source>
        <target state="translated">F# 変更可能な変数 / 参照セル</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpPrintfFormatClassificationType">
        <source>F# Printf Format</source>
        <target state="translated">F# Printf 形式</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpPropertiesClassificationType">
        <source>F# Properties</source>
        <target state="translated">F# プロパティ</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveUnusedOpens">
        <source>Remove unused open declarations</source>
        <target state="translated">未使用の Open 宣言を削除する</target>
        <note />
      </trans-unit>
      <trans-unit id="UnexpectedEqualsInFieldExpectedColon">
        <source>Unexpected symbol '=' in field declaration. Expected ':' or other token.</source>
        <target state="translated">フィールド宣言で予期しないシンボル '=' が発生しました。':' またはその他のトークンが必要です。</target>
        <note />
      </trans-unit>
      <trans-unit id="UnusedOpens">
        <source>Open declaration can be removed.</source>
        <target state="translated">Open 宣言は削除できます。</target>
        <note />
      </trans-unit>
      <trans-unit id="6008">
        <source>IntelliSense</source>
        <target state="translated">IntelliSense</target>
        <note />
      </trans-unit>
      <trans-unit id="6009">
        <source>QuickInfo</source>
        <target state="translated">QuickInfo</target>
        <note />
      </trans-unit>
      <trans-unit id="AddAssemblyReference">
        <source>Add an assembly reference to '{0}'</source>
        <target state="translated">アセンブリ参照を '{0}' に追加する</target>
        <note />
      </trans-unit>
      <trans-unit id="AddProjectReference">
        <source>Add a project reference to '{0}'</source>
        <target state="translated">プロジェクト参照を '{0}' に追加する</target>
        <note />
      </trans-unit>
      <trans-unit id="6010">
        <source>Code Fixes</source>
        <target state="translated">コード修正</target>
        <note />
      </trans-unit>
      <trans-unit id="6011">
        <source>Performance</source>
        <target state="translated">パフォーマンス</target>
        <note />
      </trans-unit>
      <trans-unit id="TheValueIsUnused">
        <source>The value is unused</source>
        <target state="translated">値は使用されていません</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotDetermineSymbol">
        <source>Cannot determine the symbol under the caret</source>
        <target state="translated">キャレットの下のシンボルを特定できません</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotNavigateUnknown">
        <source>Cannot navigate to the requested location</source>
        <target state="translated">要求された場所に移動できません</target>
        <note />
      </trans-unit>
      <trans-unit id="LocatingSymbol">
        <source>Locating the symbol under the caret...</source>
        <target state="translated">キャレットの下のシンボルを検索しています...</target>
        <note />
      </trans-unit>
      <trans-unit id="NavigatingTo">
        <source>Navigating to symbol...</source>
        <target state="translated">シンボルに移動しています...</target>
        <note />
      </trans-unit>
      <trans-unit id="NavigateToFailed">
        <source>Navigate to symbol failed: {0}</source>
        <target state="translated">シンボルへの移動に失敗しました: {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="ExceptionsHeader">
        <source>Exceptions:</source>
        <target state="translated">例外:</target>
        <note />
      </trans-unit>
      <trans-unit id="GenericParametersHeader">
        <source>Generic parameters:</source>
        <target state="translated">ジェネリック パラメーター:</target>
        <note />
      </trans-unit>
      <trans-unit id="RenameValueToDoubleUnderscore">
        <source>Rename '{0}' to '__'</source>
        <target state="translated">'{0}' から '__' に名前を変更する</target>
        <note />
      </trans-unit>
      <trans-unit id="6012">
        <source>Advanced</source>
        <target state="translated">詳細</target>
        <note />
      </trans-unit>
      <trans-unit id="6014">
        <source>Formatting</source>
        <target state="translated">書式設定</target>
        <note />
      </trans-unit>
      <trans-unit id="UseFSharpLambda">
        <source>Use F# lambda syntax</source>
        <target state="translated">F# のラムダ構文を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseMutationWhenValueIsMutable">
        <source>Use '&lt;-' to mutate value</source>
        <target state="translated">'&lt;-' を使用して値を変換する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseNameof">
        <source>Use 'nameof'</source>
        <target state="translated">'nameof' を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseTripleQuotedInterpolation">
        <source>Use triple quoted string interpolation.</source>
        <target state="translated">三重引用符で囲まれた文字列補間を使用します。</target>
        <note />
      </trans-unit>
      <trans-unit id="UseUpcastKeyword">
        <source>Use 'upcast'</source>
        <target state="translated">'upcast' を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseUpcastOperator">
        <source>Use ':&gt;' operator</source>
        <target state="translated">':&gt;' 演算子を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseNotForNegation">
        <source>Use 'not' to negate expression</source>
        <target state="translated">式を否定するには 'not' を使用する</target>
        <note />
      </trans-unit>
      <trans-unit id="UseValueInsteadOfDeref">
        <source>Use '.Value' to dereference expression</source>
        <target state="translated">'.Value' を使用して式を逆参照する</target>
        <note />
      </trans-unit>
      <trans-unit id="WrapExpressionInParentheses">
        <source>Wrap expression in parentheses</source>
        <target state="translated">式をかっこで囲む</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>