<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="fr" original="../FSharp.Editor.resx">
    <body>
      <trans-unit id="AddMissingEqualsToTypeDefinition">
        <source>Add missing '=' to type definition</source>
        <target state="translated">Ajouter un '=' manquant à la définition de type</target>
        <note />
      </trans-unit>
      <trans-unit id="AddMissingFunKeyword">
        <source>Add missing 'fun' keyword</source>
        <target state="translated">Ajouter le mot clé 'fun' manquant</target>
        <note />
      </trans-unit>
      <trans-unit id="AddMissingInstanceMemberParameter">
        <source>Add missing instance member parameter</source>
        <target state="translated">Ajouter un paramètre de membre d’instance manquant</target>
        <note />
      </trans-unit>
      <trans-unit id="AddNewKeyword">
        <source>Add 'new' keyword</source>
        <target state="translated">Ajouter le mot clé 'new'</target>
        <note />
      </trans-unit>
      <trans-unit id="AddTypeAnnotation">
        <source>Add type annotation</source>
        <target state="translated">Ajouter une annotation de type</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToAnonymousRecord">
        <source>Convert to Anonymous Record</source>
        <target state="translated">Convertir en enregistrement anonyme</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToNotEqualsEqualityExpression">
        <source>Use '&lt;&gt;' for inequality check</source>
        <target state="translated">Utiliser '&lt;&gt;' pour vérifier l'inégalité</target>
        <note />
      </trans-unit>
      <trans-unit id="ConvertToSingleEqualsEqualityExpression">
        <source>Use '=' for equality check</source>
        <target state="translated">Utiliser '=' pour vérifier l'égalité</target>
        <note />
      </trans-unit>
      <trans-unit id="ChangePrefixNegationToInfixSubtraction">
        <source>Use subtraction instead of negation</source>
        <target state="translated">Utiliser la soustraction à la place de la négation</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableLocalValuesClassificationType">
        <source>F# Disposable Values (locals)</source>
        <target state="translated">Valeurs F# pouvant être supprimées (variables locales)</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableTopLevelValuesClassificationType">
        <source>F# Disposable Values (top-level)</source>
        <target state="translated">Valeurs F# pouvant être supprimées (niveau supérieur)</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpDisposableTypesClassificationType">
        <source>F# Disposable Types</source>
        <target state="translated">Types F# pouvant être supprimés</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpFunctionsClassificationType">
        <source>F# Functions</source>
        <target state="translated">Fonctions F#</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementInterface">
        <source>Implement interface</source>
        <target state="translated">Implémenter l'interface</target>
        <note />
      </trans-unit>
      <trans-unit id="ImplementInterfaceWithoutTypeAnnotation">
        <source>Implement interface without type annotation</source>
        <target state="translated">Implémenter l'interface sans annotation de type</target>
        <note />
      </trans-unit>
      <trans-unit id="MakeDeclarationMutable">
        <source>Make declaration 'mutable'</source>
        <target state="translated">Rendre la déclaration 'mutable'</target>
        <note />
      </trans-unit>
      <trans-unit id="MakeOuterBindingRecursive">
        <source>Make '{0}' recursive</source>
        <target state="translated">Rendre '{0}' récursif</target>
        <note />
      </trans-unit>
      <trans-unit id="PrefixValueNameWithUnderscore">
        <source>Prefix '{0}' with underscore</source>
        <target state="translated">Faire précéder '{0}' d'un trait de soulignement</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveReturn">
        <source>Remove 'return'</source>
        <target state="translated">Supprimer 'return'</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveReturnBang">
        <source>Remove 'return!'</source>
        <target state="translated">Supprimer 'return!'</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveUnusedBinding">
        <source>Remove unused binding</source>
        <target state="translated">Supprimer la liaison inutilisée</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveYield">
        <source>Remove 'yield'</source>
        <target state="translated">Supprimer 'yield'</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveYieldBang">
        <source>Remove 'yield!'</source>
        <target state="translated">Supprimer 'yield!'</target>
        <note />
      </trans-unit>
      <trans-unit id="RenameValueToUnderscore">
        <source>Rename '{0}' to '_'</source>
        <target state="translated">Renommer '{0}' en '_'</target>
        <note />
      </trans-unit>
      <trans-unit id="SimplifyName">
        <source>Simplify name</source>
        <target state="translated">Simplifier le nom</target>
        <note />
      </trans-unit>
      <trans-unit id="NameCanBeSimplified">
        <source>Name can be simplified.</source>
        <target state="translated">Le nom peut être simplifié.</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpMutableVarsClassificationType">
        <source>F# Mutable Variables / Reference Cells</source>
        <target state="translated">Variables mutables / Cellules de référence F#</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpPrintfFormatClassificationType">
        <source>F# Printf Format</source>
        <target state="translated">Format Printf F#</target>
        <note />
      </trans-unit>
      <trans-unit id="FSharpPropertiesClassificationType">
        <source>F# Properties</source>
        <target state="translated">Propriétés F#</target>
        <note />
      </trans-unit>
      <trans-unit id="RemoveUnusedOpens">
        <source>Remove unused open declarations</source>
        <target state="translated">Supprimer les déclarations open inutilisées</target>
        <note />
      </trans-unit>
      <trans-unit id="UnusedOpens">
        <source>Open declaration can be removed.</source>
        <target state="translated">La déclaration open peut être supprimée.</target>
        <note />
      </trans-unit>
      <trans-unit id="6008">
        <source>IntelliSense</source>
        <target state="translated">IntelliSense</target>
        <note />
      </trans-unit>
      <trans-unit id="6009">
        <source>QuickInfo</source>
        <target state="translated">QuickInfo</target>
        <note />
      </trans-unit>
      <trans-unit id="AddAssemblyReference">
        <source>Add an assembly reference to '{0}'</source>
        <target state="translated">Ajouter une référence d'assembly à '{0}'</target>
        <note />
      </trans-unit>
      <trans-unit id="AddProjectReference">
        <source>Add a project reference to '{0}'</source>
        <target state="translated">Ajouter une référence de projet à '{0}'</target>
        <note />
      </trans-unit>
      <trans-unit id="6010">
        <source>Code Fixes</source>
        <target state="translated">Correctifs du code</target>
        <note />
      </trans-unit>
      <trans-unit id="6011">
        <source>Performance</source>
        <target state="translated">Performances</target>
        <note />
      </trans-unit>
      <trans-unit id="TheValueIsUnused">
        <source>The value is unused</source>
        <target state="translated">La valeur est inutilisée</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotDetermineSymbol">
        <source>Cannot determine the symbol under the caret</source>
        <target state="translated">Impossible de déterminer le symbole sous le point d'insertion</target>
        <note />
      </trans-unit>
      <trans-unit id="CannotNavigateUnknown">
        <source>Cannot navigate to the requested location</source>
        <target state="translated">Impossible de naviguer à l'emplacement demandé</target>
        <note />
      </trans-unit>
      <trans-unit id="LocatingSymbol">
        <source>Locating the symbol under the caret...</source>
        <target state="translated">Localisation du symbole sous le point d'insertion...</target>
        <note />
      </trans-unit>
      <trans-unit id="NavigatingTo">
        <source>Navigating to symbol...</source>
        <target state="translated">Navigation vers le symbole...</target>
        <note />
      </trans-unit>
      <trans-unit id="NavigateToFailed">
        <source>Navigate to symbol failed: {0}</source>
        <target state="translated">Échec de la navigation vers le symbole : {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="ExceptionsHeader">
        <source>Exceptions:</source>
        <target state="translated">Exceptions :</target>
        <note />
      </trans-unit>
      <trans-unit id="GenericParametersHeader">
        <source>Generic parameters:</source>
        <target state="translated">Paramètres génériques :</target>
        <note />
      </trans-unit>
      <trans-unit id="RenameValueToDoubleUnderscore">
        <source>Rename '{0}' to '__'</source>
        <target state="translated">Renommer '{0}' en '__'</target>
        <note />
      </trans-unit>
      <trans-unit id="6012">
        <source>Advanced</source>
        <target state="translated">Avancé</target>
        <note />
      </trans-unit>
      <trans-unit id="6013">
        <source>CodeLens</source>
        <target state="translated">CodeLens</target>
        <note />
      </trans-unit>
      <trans-unit id="6014">
        <source>Formatting</source>
        <target state="translated">Mise en forme</target>
        <note />
      </trans-unit>
      <trans-unit id="UseFSharpLambda">
        <source>Use F# lambda syntax</source>
        <target state="translated">Utiliser la syntaxe lambda F#</target>
        <note />
      </trans-unit>
      <trans-unit id="UseMutationWhenValueIsMutable">
        <source>Use '&lt;-' to mutate value</source>
        <target state="translated">Utiliser '&lt;-' pour muter la valeur</target>
        <note />
      </trans-unit>
      <trans-unit id="UseNameof">
        <source>Use 'nameof'</source>
        <target state="translated">Utiliser « nameof »</target>
        <note />
      </trans-unit>
      <trans-unit id="UseUpcastKeyword">
        <source>Use 'upcast'</source>
        <target state="translated">Utiliser 'upcast'</target>
        <note />
      </trans-unit>
      <trans-unit id="UseUpcastOperator">
        <source>Use ':&gt;' operator</source>
        <target state="translated">Utiliser l'opérateur ':&gt;'</target>
        <note />
      </trans-unit>
      <trans-unit id="UseNotForNegation">
        <source>Use 'not' to negate expression</source>
        <target state="translated">Utiliser 'not' pour annuler l'expression</target>
        <note />
      </trans-unit>
      <trans-unit id="UseValueInsteadOfDeref">
        <source>Use '.Value' to dereference expression</source>
        <target state="translated">Utilisez '.Value' pour déréférencer l'expression</target>
        <note />
      </trans-unit>
      <trans-unit id="WrapExpressionInParentheses">
        <source>Wrap expression in parentheses</source>
        <target state="translated">Mettre l'expression entre parenthèses</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>