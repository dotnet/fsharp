<Project>
  <Import Project="FSharpBuild.Directory.Build.targets" Condition = " '$(FSharpTestCompilerVersion)' == '' "/>
  <Import Project="FSharpTests.Directory.Build.targets" Condition = " '$(FSharpTestCompilerVersion)' != '' "/>
  <Import Project="CoordinateXliff.targets" Condition = " '$(FSharpBuildAssemblyFile)' != '' and '$(XliffTasksAssembly)' != '' "/>

  <!-- We want to restore ALL the MIBCs when we build anything, since in the future it will contain different profiles, not only the FSC one we got from building Giraffe -->
  <ItemGroup>
    <MIBCPackage Include="optimization.windows_nt-x86.mibc.runtime"   Version="$(optimizationwindows_ntx86MIBCRuntimeVersion)" />
    <MIBCPackage Include="optimization.windows_nt-x64.mibc.runtime"   Version="$(optimizationwindows_ntx64MIBCRuntimeVersion)" />
    <MIBCPackage Include="optimization.windows_nt-arm64.mibc.runtime" Version="$(optimizationwindows_ntarm64MIBCRuntimeVersion)" />
    <MIBCPackage Include="optimization.linux-x64.mibc.runtime"        Version="$(optimizationlinuxx64MIBCRuntimeVersion)" />
    <MIBCPackage Include="optimization.linux-arm64.mibc.runtime"      Version="$(optimizationlinuxarm64MIBCRuntimeVersion)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="@(MIBCPackage)" />
  </ItemGroup>

  <!-- Copy all packages to the output (per architecture) -->
  <Target
    Name="CopyPackageFiles"
    AfterTargets="Restore"
    BeforeTargets="CopyPackageFilesToProto">

    <ItemGroup>
      <MibcFiles Include="$(NuGetPackageRoot)%(MibcPackage.Identity)\%(MibcPackage.Version)\**\DotNet_FSharp.mibc" />
    </ItemGroup>

    <Copy
      SourceFiles="@(MibcFiles)"
      DestinationFolder="$(ArtifactsDir)\mibc\%(MibcPackage.Identity)\"
      SkipUnchangedFiles="true" />
  </Target>
  
  <!-- Copy all packages to the output (per architecture) - now for proto, sequentially, to avoid locking -->
  <Target
    Name="CopyPackageFilesToProto"
    AfterTargets="CopyPackageFiles"
    BeforeTargets="Build;Pack">
    
    <ItemGroup>
      <MibcFiles Include="$(NuGetPackageRoot)%(MibcPackage.Identity)\%(MibcPackage.Version)\**\DotNet_FSharp.mibc" />
    </ItemGroup>
    
    <Copy
      SourceFiles="@(MibcFiles)"
      DestinationFolder="$(ArtifactsDir)\mibc-proto\%(MibcPackage.Identity)\"
      SkipUnchangedFiles="true" />
  </Target>

  <PropertyGroup Condition="'$(BUILDING_USING_DOTNET)' == 'true'">
    <!-- Note, that default framework is used here (the one we use for development in the current cycle),
         since it's a non-arcade and non-sourcebuild scenario -->
    <FsLexPath>$(ArtifactsDir)/bin/fslex/$(Configuration)/$(FSharpNetCoreProductDefaultTargetFramework)/$(NETCoreSdkPortableRuntimeIdentifier)/fslex.dll</FsLexPath>
    <FsYaccPath>$(ArtifactsDir)/bin/fsyacc/$(Configuration)/$(FSharpNetCoreProductDefaultTargetFramework)/$(NETCoreSdkPortableRuntimeIdentifier)/fsyacc.dll</FsYaccPath>
  </PropertyGroup>

  <ItemGroup Condition="'$(UnitTestType)' == 'nunit'">
    <PackageReference Include="NUnit" Version="$(NUnitVersion)" />
    <PackageReference Include="NUnit3TestAdapter" Version="$(NUnit3TestAdapterVersion)" />
    <PackageReference Include="NunitXml.TestLogger" Version="$(NunitXmlTestLoggerVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(UnitTestType)' == 'xunit'">
    <PackageReference Include="xunit" Version="$(XUnitVersion)" />
    <PackageReference Include="xunit.runner.visualstudio" Version="$(XUnitRunnerVersion)" />
    <PackageReference Include="NunitXml.TestLogger" Version="$(NunitXmlTestLoggerVersion)" />
  </ItemGroup>

  <!--
    When .NET gets built from source, make the SDK aware there are bootstrap packages
    for Microsoft.NETCore.App.Runtime.<rid> and Microsoft.NETCore.App.Crossgen2.<rid>.
  -->
  <ItemGroup Condition="'$(DotNetBuildFromSource)' == 'true'">
    <KnownRuntimePack Update="Microsoft.NETCore.App">
      <RuntimePackRuntimeIdentifiers
        Condition="'%(TargetFramework)' == '$(NetCurrent)'">%(RuntimePackRuntimeIdentifiers);$(NETCoreSdkRuntimeIdentifier)</RuntimePackRuntimeIdentifiers>
    </KnownRuntimePack>
    <KnownCrossgen2Pack Update="Microsoft.NETCore.App.Crossgen2">
      <Crossgen2RuntimeIdentifiers
        Condition="'%(TargetFramework)' == '$(NetCurrent)'">%(Crossgen2RuntimeIdentifiers);$(NETCoreSdkRuntimeIdentifier)</Crossgen2RuntimeIdentifiers>
    </KnownCrossgen2Pack>
  </ItemGroup>

</Project>
