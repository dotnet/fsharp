<Project>

  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Arcade.Sdk" />
  <Import Project="eng\targets\Imports.targets" />
  <Import Project="eng\targets\NGenBinaries.targets" />
  <Import Project="eng\targets\NuGet.targets" />
  <Import Project="FSharp.Profiles.props" />

  <Target Name="NoneSubstituteTextFiles"
          Inputs="@(NoneSubstituteText)"
          Outputs="@(NoneSubstituteText->'$(IntermediateOutputPath)%(Filename)%(Extension)')"
          BeforeTargets="AssignTargetPaths;BeforeBuild;GenerateFSharpTextResources">

    <PropertyGroup>
      <__TargetFilePath>@(NoneSubstituteText->'$(IntermediateOutputPath)%(Filename)%(Extension)')</__TargetFilePath>
      <__TargetFileName>@(NoneSubstituteText->'%(Filename)%(Extension)')</__TargetFileName>
      <__TargetLink>@(NoneSubstituteText->'%(Link)')</__TargetLink>

      <_ReplacementText>$([System.IO.File]::ReadAllText('%(NoneSubstituteText.FullPath)'))</_ReplacementText>
      <_ReplacementText Condition="'%(NoneSubstituteText.Pattern1)' != ''">$(_ReplacementText.Replace('%(NoneSubstituteText.Pattern1)', '%(NoneSubstituteText.Replacement1)'))</_ReplacementText>
      <_ReplacementText Condition="'%(NoneSubstituteText.Pattern2)' != ''">$(_ReplacementText.Replace('%(NoneSubstituteText.Pattern2)', '%(NoneSubstituteText.Replacement2)'))</_ReplacementText>
      <_ReplacementText Condition="'%(NoneSubstituteText.Pattern3)' != ''">$(_ReplacementText.Replace('%(NoneSubstituteText.Pattern3)', '%(NoneSubstituteText.Replacement3)'))</_ReplacementText>

      <_CopyToOutputDirectory Condition="'%(NoneSubstituteText.CopyToOutputDirectory)' != ''">%(NoneSubstituteText.CopyToOutputDirectory)</_CopyToOutputDirectory>
      <_CopyToOutputDirectory Condition="'%(NoneSubstituteText.CopyToOutputDirectory)' == ''">Never</_CopyToOutputDirectory>

      <_IncludeInVsix>false</_IncludeInVsix>
      <_IncludeInVsix Condition="'%(NoneSubstituteText.IncludeInVsix)' == 'true'">true</_IncludeInVsix>
    </PropertyGroup>

    <MakeDir Directories="$(IntermediateOutputPath)"
             Condition="!Exists('$(IntermediateOutputPath)')" />
    <WriteLinesToFile File="$(__TargetFilePath)" Lines="$(_ReplacementText)" Overwrite="true" WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <None Include="$(__TargetFilePath)" CopyToOutputDirectory="$(_CopyToOutputDirectory)" />
      <FileWrites Include="$(__TargetFilePath)" Condition="'$(__TargetFileName)' != 'App.config'" />
      <Content Include="$(__TargetFilePath)" CopyToOutputDirectory="Always" IncludeInVsix="true" Link="$(__TargetLink)" Condition="'$(_IncludeInVsix)'=='true'" />
    </ItemGroup>
  </Target>

  <Target Name="_GenerateBuildPropertiesFile"
          Outputs="$(IntermediateOutputPath)buildproperties.fs"
          BeforeTargets="BeforeBuild"
          Condition="'$(Language)'=='F#'">

    <ItemGroup>
      <_BuildPropertyLines Remove="@(_BuildPropertyLines)" />
      <_BuildPropertyLines Include="//  &lt;auto-generated &gt;" />
      <_BuildPropertyLines Include="//    &lt;Generated by the FSharp WriteCodeFragment class./&gt;" />
      <_BuildPropertyLines Include="//  &lt;/auto-generated/&gt;" />
      <_BuildPropertyLines Include="//" />
      <_BuildPropertyLines Include="module internal FSharp.BuildProperties" />
      <_BuildPropertyLines Include="let fsProductVersion = &quot;$(FSPRODUCTVERSION)&quot;" />
      <_BuildPropertyLines Include="let fsLanguageVersion = &quot;$(FSLANGUAGEVERSION)&quot;" />
    </ItemGroup>

    <MakeDir
      Directories="$(IntermediateOutputPath)"
      Condition="!Exists('$(IntermediateOutputPath)')" />
    <WriteLinesToFile File="$(IntermediateOutputPath)buildproperties.fs" Lines="@(_BuildPropertyLines)" Overwrite="true" WriteOnlyWhenDifferent="true" />

    <!-- Make sure it will get cleaned  -->
    <ItemGroup>
      <CompileBefore Include="$(IntermediateOutputPath)buildproperties.fs" />
      <FsGeneratedSource Include="$(IntermediateOutputPath)buildproperties.fs" />
      <FileWrites Include="$(IntermediateOutputPath)buildproperties.fs" />
    </ItemGroup>
  </Target>

  <Target Name="BeforeResGen"
          Inputs="@(EmbeddedResource->'$(IntermediateOutputPath)%(Filename)%(Extension)')"
          Outputs="@(EmbeddedResource->'$(IntermediateOutputPath)resources\%(Filename)%(Extension)')"
          Condition="'$(Configuration)' != 'Proto' and '$(Language)'=='F#' and '$(DisableCompilerRedirection)' != 'true' ">

    <MakeDir Directories="$(IntermediateOutputPath)" Condition="!Exists('$(IntermediateOutputPath)')" />
    <MakeDir Directories="$(IntermediateOutputPath)resources\" Condition="!Exists('$(IntermediateOutputPath)resources\')" />

    <SubstituteText EmbeddedResources="@(EmbeddedResource)">
      <Output TaskParameter="CopiedFiles" ItemName="CopiedFiles" />
    </SubstituteText>

    <ItemGroup>
      <IntermediateFiles Include="$(IntermediateOutputPath)\*.resx" />
      <IntermediateResourcesFiles Include="$(IntermediateOutputPath)resources\*.resx" />
    </ItemGroup>

    <!-- IntermediateFiles Hashes -->
    <GetFileHash Files="@(IntermediateFiles)">
      <Output
          TaskParameter="Items"
          ItemName="IntermediateFilesHashes" />
    </GetFileHash>

    <Hash ItemsToHash="@(IntermediateFilesHashes->'%(FileHash)')">
      <Output TaskParameter="HashResult" PropertyName="IntermediateFilesHash" />
    </Hash>

    <!-- CopiedFilesForHash Hashes -->
    <GetFileHash Files="@(IntermediateResourceFilesForHash)">
      <Output
          TaskParameter="Items"
          ItemName="IntermediateResourceFilesHashes" />
    </GetFileHash>

    <Hash ItemsToHash="@(IntermediateResourceFilesHashes->'%(FileHash)')">
      <Output TaskParameter="HashResult" PropertyName="IntermediateResourceFilesHash" />
    </Hash>

    <!-- Update EmbeddedResources -->
    <ItemGroup Condition="'$(IntermediateFilesHash)' != '$(IntermediateResourceFilesHash)'">
        <EmbeddedResource Remove="@(EmbeddedResource)"/>
        <EmbeddedResource Include="@(CopiedFiles)"/>
    </ItemGroup>

    <Copy SourceFiles="@(CopyVsixResources)" DestinationFolder="$(IntermediateOutputPath)\resources\Resources" Condition="'$(IntermediateFilesHash)' != '$(IntermediateResourceFilesHash)'" />
  </Target>

  <PropertyGroup>
    <CoreBuildDependsOn>$(CoreBuildDependsOn);PrefixRepoToReleaseNotes</CoreBuildDependsOn>
  </PropertyGroup>

  <Target Name="PrefixRepoToReleaseNotes"
          BeforeTargets="InitializeStandardNuspecProperties"
          DependsOnTargets="InitializeSourceControlInformationFromSourceControlManager"
          Condition="'$(IsPackable)'=='true'">

    <PropertyGroup>
      <_GitUrl>$([System.Text.RegularExpressions.Regex]::Replace($(ScmRepositoryUrl), ".git$", ""))</_GitUrl>
      <PackageReleaseNotes>$(_GitUrl)$(PackageReleaseNotes)</PackageReleaseNotes>
    </PropertyGroup>
  </Target>

</Project>
