// Copyright (c) Microsoft Corporation.  All Rights Reserved.  See License.txt in the project root for license information.

{

module internal FSharp.Compiler.AbstractIL.AsciiLexer 

open Internal.Utilities.Collections
open Internal.Utilities.Text
open Internal.Utilities.Text.Lexing
open Internal.Utilities.Library

open FSharp.Compiler.AbstractIL 
open FSharp.Compiler.AbstractIL.AsciiParser 
open FSharp.Compiler.AbstractIL.AsciiConstants 


let lexeme (lexbuf : LexBuffer<char>) = LexBuffer<char>.LexemeString lexbuf
let lexemeChar (lexbuf : LexBuffer<char>) n = lexbuf.LexemeChar n

let unexpectedChar _lexbuf =
  raise Parsing.RecoverableParseError ;;

// -------------------------------------------------------------------- 
// Keywords
// -------------------------------------------------------------------- 

let keywords = 
    lazy [ "void",VOID; 
           "bool",BOOL;
           "bytearray",BYTEARRAY;
           "char",CHAR;
           "class",CLASS;
           "default",DEFAULT;
           "explicit",EXPLICIT;
           "float32",FLOAT32;
           "float64",FLOAT64;
           "instance",INSTANCE;
           "int",INT;
           "int16",INT16;
           "int32",INT32;
           "int64",INT64;
           "int8",INT8;
           "method",METHOD;
           "native",NATIVE;
           "object", OBJECT;
           "string",STRING;
           "uint",UINT;
           "uint16",UINT16;
           "uint32",UINT32;
           "uint64",UINT64;
           "uint8",UINT8;
           "unmanaged",UNMANAGED;
           "unsigned",UNSIGNED;
           "value",VALUE;
           "valuetype",VALUETYPE;
           "vararg",VARARG ] 

// -------------------------------------------------------------------- 
// Instructions
// -------------------------------------------------------------------- 

let kwdInstrTable = 
  lazy 
   (let t = HashMultiMap(1000, HashIdentity.Structural)
    List.iter t.Add (Lazy.force keywords);
    let addTable f l = List.iter (fun (x,i) -> t.Add (String.concat "." x,f i)) (Lazy.force l)
    addTable (fun i -> INSTR_NONE i) NoArgInstrs;
    addTable (fun i -> INSTR_I i) Int32Instrs;
    addTable (fun i -> INSTR_I32_I32 i) Int32Int32Instrs;
    addTable (fun i -> INSTR_I8 i) Int64Instrs;
    addTable (fun i -> INSTR_R i) DoubleInstrs;
    addTable (fun i -> INSTR_TYPE i) TypeInstrs;
    addTable (fun i -> INSTR_INT_TYPE i) IntTypeInstrs;
    addTable (fun i -> INSTR_VALUETYPE i) ValueTypeInstrs;
    addTable (fun i -> INSTR_STRING i) StringInstrs;
    addTable (fun i -> INSTR_TOK i) TokenInstrs;
    t)

let kwdOrInstr s = (Lazy.force kwdInstrTable).[s] (* words *)

let evalDigit ch  = (int ch) - (int '0')

let kwdOrInstrOrId s = match (Lazy.force kwdInstrTable).TryFind s with Some v -> v | _ -> VAL_ID s
        
}

// -------------------------------------------------------------------- 
// The Rules
// -------------------------------------------------------------------- 
rule token = parse
  | "," { COMMA }
  | "." { DOT }
  | "*" { STAR }
  | "!" { BANG }
  | "&" { AMP }
  | "(" { LPAREN }
  | ")" { RPAREN }
  | "[" { LBRACK }
  | "]" { RBRACK }
  | "/" { SLASH }
  | "<" { LESS }
  | ">" { GREATER }
  | "..." { ELIPSES }
  | "::" { DCOLON }
  | "+" { PLUS }
  | (['0'-'9']) | (['0'-'9']['0'-'9']['0'-'9']+)
      {  VAL_INT64(int64(lexeme lexbuf)) }

  (* We need to be able to parse all of *)
  (* ldc.r8     0. *)
  (* float64(-657435.)     *)
  (* and int32[0...,0...] *)
  (* The problem is telling an integer-followed-by-ellipses from a floating-point-nubmer-followed-by-dots *)

  | ((['0'-'9']) | (['0'-'9']['0'-'9']['0'-'9']+)) "..."
      {  let b = lexbuf.LexemeView in 
         VAL_INT32_ELIPSES(int32(b.Slice(0, (b.Length - 3)).ToString())) }
  | ['0'-'9' 'A'-'F' 'a'-'f' ] ['0'-'9' 'A'-'F' 'a'-'f' ] 
      { let c1 = (lexemeChar lexbuf 0) in 
        let c2 = (lexemeChar lexbuf 1) in 
        if c1 >= '0' && c1 <= '9' && c2 >= '0' && c2 <= '9' then 
          VAL_INT64(int64 (10*evalDigit c1 + evalDigit c2) )
        else VAL_ID(lexeme lexbuf) }
  | '0' 'x' ['0'-'9' 'a'-'f' 'A'-'F']+ 
      { VAL_INT64(int64(lexeme lexbuf)) }
  | "FFFFFF"  ['0'-'9' 'A'-'F' 'a'-'f' ] ['0'-'9' 'A'-'F' 'a'-'f' ] 
      { let c1 = (lexemeChar lexbuf 6) in 
        let c2 = (lexemeChar lexbuf 7) in 
        if c1 >= '0' && c1 <= '9' && c2 >= '0' && c2 <= '9' then 
          VAL_INT64(int64 (10*evalDigit c1 + evalDigit c2)) 
        else VAL_ID(lexeme lexbuf) }

  | '-' ['0'-'9']+ 
      { VAL_INT64(int64(lexeme lexbuf)) }
  | ('+'|'-')? ['0'-'9']+ ('.' ['0' - '9']*)? (('E'|'e') ('-'|'+')? ['0' - '9']+)?
      { VAL_FLOAT64( (float (lexeme lexbuf)) ) }

  | ("conv"|"cgt"|"clt"|"ceq"|"add"|"sub"|"div"|"rem"|"mul"|"beq"|"bne"|"cne"|"ldarga"|"ldloca"|"ldind"|"newarr"|"shr"|"starg"|"stind"|"ldelem"|"ldelema"|"ldlen"|"stelem"|"unbox"|"box"|"initobj") '.' ['a'-'z' 'A'-'Z' '0'-'9' '.']+
      { let s = (lexeme lexbuf) in kwdOrInstr s }
  | [ '`'  '\128'-'\255' '@' '?' '$' 'a'-'z' 'A'-'Z' '_'] [  '`' '\128'-'\255' '$' 'a'-'z' 'A'-'Z' '0'-'9' '-' '_' '@' '$' ] *
      { kwdOrInstrOrId (lexeme lexbuf) }
  | [ '`'  '\128'-'\255' '@' '?' '$' 'a'-'z' 'A'-'Z' '_'] [  '`' '\128'-'\255' '$' 'a'-'z' 'A'-'Z' '0'-'9' '-' '_' '@' '$' ]+
        ('.' [ '`'  '\128'-'\255' '@' '?' '$' 'a'-'z' 'A'-'Z' '_'] [  '`' '\128'-'\255' '$' 'a'-'z' 'A'-'Z' '0'-'9' '-' '_' '@' '$' ] +)+
      { VAL_DOTTEDNAME(lexeme lexbuf) } 
                                            
  |   [' ' '\t' '\r' '\n']                  
      { token lexbuf }                      
  | _ 
      { unexpectedChar lexbuf }            
  | eof                                     
      { EOF }                                     

