// Copyright (c) Microsoft Corporation.  All Rights Reserved.  See License.txt in the project root for license information.

%{
open FSharp.Compiler.ErrorLogger
open FSharp.Compiler.ParseHelpers
open FSharp.Compiler.Syntax

let dummy       = IfdefId("DUMMY")

let doNothing _ dflt=
    dflt

let fail (ps : Internal.Utilities.Text.Parsing.IParseState) i e =
    let f,t = ps.InputRange i
    let m   = mkSynRange f t
    errorR(Error(e,m))
    dummy
%}


%start start

%token <string> ID
%token OP_NOT OP_AND OP_OR LPAREN RPAREN PRELUDE EOF

%nonassoc RPAREN
%nonassoc PRELUDE
%left OP_OR
%left OP_AND
%left OP_NOT
%nonassoc LPAREN
%nonassoc ID

%type < LexerIfdefExpression > start

%%

start: Full { $1 }

Recover:
   | error                  { doNothing parseState ()                                         }

Full:
    | PRELUDE Expr EOF      { $2                                                            }
    | Recover               { fail parseState 1 (FSComp.SR.ppparsMissingToken("#if/#elif")) }

Expr:
    | LPAREN Expr RPAREN    { $2                                                            }
    | ID                    { IfdefId($1)                                                   }
    | OP_NOT Expr           { IfdefNot($2)                                                  }
    | Expr OP_AND Expr      { IfdefAnd($1,$3)                                               }
    | Expr OP_OR Expr       { IfdefOr($1,$3)                                                }

    | OP_AND Recover        { fail parseState 1 (FSComp.SR.ppparsUnexpectedToken("&&"))     }
    | OP_OR Recover         { fail parseState 1 (FSComp.SR.ppparsUnexpectedToken("||"))     }
    | OP_NOT Recover        { fail parseState 1 (FSComp.SR.ppparsUnexpectedToken("!"))      }
    | LPAREN error RPAREN   { doNothing parseState dummy                                    }
    | LPAREN Expr Recover   { fail parseState 3 (FSComp.SR.ppparsMissingToken(")"))         }
    | LPAREN Recover        { fail parseState 2 (FSComp.SR.ppparsIncompleteExpression())    }
    | RPAREN Recover        { fail parseState 1 (FSComp.SR.ppparsUnexpectedToken(")"))      }
    | Expr Recover          { fail parseState 2 (FSComp.SR.ppparsIncompleteExpression())    }
    | EOF                   { fail parseState 1 (FSComp.SR.ppparsIncompleteExpression())    }
