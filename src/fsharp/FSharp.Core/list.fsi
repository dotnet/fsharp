// Copyright (c) Microsoft Corporation.  All Rights Reserved.  See License.txt in the project root for license information.

namespace Microsoft.FSharp.Collections

open System
open System.Collections.Generic
open Microsoft.FSharp.Core
open Microsoft.FSharp.Collections

/// <summary>Contains operations for working with values of type <see cref="T:Microsoft.FSharp.Collections.list`1"/>.</summary>
///
/// <namespacedoc><summary>Operations for collections such as lists, arrays, sets, maps and sequences. See also 
///    <a href="https://docs.microsoft.com/dotnet/fsharp/language-reference/fsharp-collection-types">F# Collection Types</a> in the F# Language Guide.
/// </summary></namespacedoc>
[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
[<RequireQualifiedAccess>]
module List = 

    /// <summary>Returns a new list that contains all pairings of elements from the first and second lists.</summary>
    ///
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    ///
    /// <returns>The resulting list of pairs.</returns>
    /// 
    /// <example id="allPairs-example-1">
    /// <code lang="fsharp">
    /// let people = ["Kirk"; "Spock"; "McCoy"]
    /// let numbers = [1;2]
    /// people |> List.allPairs numbers 
    /// </code>
    /// The sample evaluates to 
    /// <code>
    /// [(1, "Kirk"); (1, "Spock"); (1, "McCoy"); (2, "Kirk"); (2, "Spock"); (2, "McCoy")]
    /// </code>
    /// </example>
    [<CompiledName("AllPairs")>]
    val allPairs: list1:'T1 list -> list2:'T2 list -> ('T1 * 'T2) list

    /// <summary>Returns a new list that contains the elements of the first list
    /// followed by elements of the second.</summary>
    ///
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    ///
    /// <returns>The resulting list.</returns>
    /// 
    /// <example id="append-example-1">
    /// <code lang="fsharp">
    /// List.append [1..3] [4..7]     //  evaluates [1; 2; 3; 4; 5; 6; 7]
    /// 
    /// [4..7] |> List.append [1..3]  //  evaluates [1; 2; 3; 4; 5; 6; 7]
    /// </code>
    /// </example>
    [<CompiledName("Append")>]
    val append: list1: 'T list -> list2: 'T list -> 'T list

    /// <summary>Returns the average of the elements in the list.</summary>
    ///
    /// <remarks>Raises <see cref="T:System.ArgumentException"/> if <c>list</c> is empty.</remarks>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The resulting average.</returns>
    /// 
    /// <example id="average-example-1">
    /// <code lang="fsharp">
    /// [1.0 .. 9.0] |> List.average  // evaluates 5.0
    /// </code>
    /// </example>
    /// 
    /// <example id="average-example-2">
    /// <code lang="fsharp">
    /// [1 .. 9] |> List.average
    /// </code>
    /// The sample does not compile because <c>The type 'int' does not support the operator 'DivideByInt'</c>
    /// (see <c>averageBy</c> examples for a solution)
    /// </example>
    [<CompiledName("Average")>]
    val inline average   : list:^T list -> ^T
                               when ^T : (static member (+) : ^T * ^T -> ^T)
                               and  ^T : (static member DivideByInt : ^T*int -> ^T)
                               and  ^T : (static member Zero : ^T)

    /// <summary>Returns the average of the elements generated by applying the function to each element of the list.</summary>
    ///
    /// <remarks>Raises <see cref="T:System.ArgumentException"/> if <c>list</c> is empty.</remarks>
    /// <param name="projection">The function to transform the list elements into the type to be averaged.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The resulting average.</returns>
    /// 
    /// <example id="averageBy-example-1"> Average the age of persons by extracting the age from records
    /// <code lang="fsharp">
    /// type People = {
    ///    name: string
    ///    age: int }
    /// let getAgeAsFloat person = float person.age
    /// let people = 
    ///     [ { name = "Kirk"; age = 26 }
    ///       { name = "Spock"; age = 90 }
    ///       { name = "McCoy"; age = 37 } ]
    /// people |> List.averageBy getAgeAsFloat  // evaluates 51.0
    /// </code>
    /// </example>
    /// 
    /// <example id="averageBy-example-2"> Average a list of integer numbers by converting to float
    /// <code lang="fsharp">
    /// [1 .. 9] |> List.averageBy float  // evaluates 5.0
    /// </code>
    /// </example>
    [<CompiledName("AverageBy")>]
    val inline averageBy: projection:('T -> ^U) -> list:'T list  -> ^U    
                               when ^U : (static member (+) : ^U * ^U -> ^U) 
                               and  ^U : (static member DivideByInt : ^U*int -> ^U) 
                               and  ^U : (static member Zero : ^U)

    /// <summary>Applies the given function to each element of the list. Returns
    /// the list comprised of the results <c>x</c> for each element where
    /// the function returns Some(x)</summary>
    ///
    /// <param name="chooser">The function to generate options from the elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list comprising the values selected from the chooser function.</returns>
    /// 
    /// <example id="choose-example-1">
    /// <code lang="fsharp">
    /// type Happiness = AlwaysHappy | MostOfTheTimeGrumpy
    /// type People = {
    ///     name: string
    ///     happiness: Happiness }
    /// let takeJustHappyPersons person =
    ///     match person.happiness with
    ///     | AlwaysHappy -> Some person.name
    ///     | MostOfTheTimeGrumpy -> None
    /// let candidatesForTheTrip = 
    ///     [ { name = "SpongeBob"; happiness = AlwaysHappy }
    ///       { name = "Patrick"; happiness = AlwaysHappy }
    ///       { name = "Squidward"; happiness = MostOfTheTimeGrumpy } ]
    /// candidatesForTheTrip |> List.choose takeJustHappyPersons
    /// </code>
    /// The sample evaluates to <c>[ "SpongeBob"; "Patrick" ]</c>
    /// </example>
    /// 
    /// <example id="choose-example-2">
    /// <code lang="fsharp">
    /// // Using the identity function "id" (is defined like fun x -> x)
    /// let input1 = [ Some 1; None; Some 3; None ]
    /// input1 |> List.choose id  // evaluates [1; 3]
    /// 
    /// let input2: int option list = [] 
    /// input2 |> List.choose id  // evaluates []  (notice that has the type "int list")
    /// 
    /// let input3: string option list =[ None; None ]
    /// input3 |> List.choose id  // evaluates []  (notice that has the type "string list")
    /// </code>
    /// </example>
    [<CompiledName("Choose")>]
    val choose: chooser:('T -> 'U option) -> list:'T list -> 'U list

    /// <summary>Divides the input list into chunks of size at most <c>chunkSize</c>.</summary>
    ///
    /// <param name="chunkSize">The maximum size of each chunk.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list divided into chunks.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when <c>chunkSize</c> is not positive.</exception>
    /// 
    /// <example id="chunkBySize-example-1">
    /// <code lang="fsharp">
    /// [1 .. 10 ] |> List.chunkBySize 3  // evaluates     
    /// </code>
    /// Evaluates to <c>[[1; 2; 3]; [4; 5; 6]; [7; 8; 9]; [10]]</c> . Please notice the last chunk.
    /// 
    /// <code lang="fsharp">
    /// let output2 = [1 .. 5 ] |> List.chunkBySize 10
    /// </code>
    /// Evaluates to <c>[[1; 2; 3; 4; 5]]</c>
    /// 
    /// <code lang="fsharp">
    /// let input : string list = []
    /// let output3 = input |> List.chunkBySize 10
    /// </code>
    /// Evaluates to <c>[]</c>. Please notice that has the type <c>string list list</c>.
    /// </example>
    [<CompiledName("ChunkBySize")>]
    val chunkBySize: chunkSize:int -> list:'T list -> 'T list list

    /// <summary>For each element of the list, applies the given function. Concatenates all the results and return the combined list.</summary>
    ///
    /// <param name="mapping">The function to transform each input element into a sublist to be concatenated.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The concatenation of the transformed sublists.</returns>
    /// 
    /// <example id="collect-example-1"> For each positive number in the array we are generating all the previous positive numbers
    /// <code lang="fsharp">
    /// [1..4] |> List.collect (fun x -> [1..x])
    /// </code>
    /// The sample evaluates to <c>[1;   1; 2;   1; 2; 3;   1; 2; 3; 4]</c> (added extra spaces for easy reading)
    /// </example>
    [<CompiledName("Collect")>]
    val collect: mapping:('T -> 'U list) -> list:'T list -> 'U list

    /// <summary>Compares two lists using the given comparison function, element by element.</summary>
    ///
    /// <param name="comparer">A function that takes an element from each list and returns an int.
    /// If it evaluates to a non-zero value iteration is stopped and that value is returned.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    /// 
    /// <returns>Returns the first non-zero result from the comparison function. If the first list has a 
    /// larger element, the return value is always positive. If the second list has a larger 
    /// element, the return value is always negative. When the elements are equal in the two 
    /// lists, 1 is returned if the first list is longer, 0 is returned if they are equal in 
    /// length, and -1 is returned when the second list is longer.</returns>
    ///
    /// <example-tbd></example-tbd>
    [<CompiledName("CompareWith")>]
    val inline compareWith: comparer:('T -> 'T -> int) -> list1:'T list -> list2:'T list -> int

    /// <summary>Returns a new list that contains the elements of each the lists in order.</summary>
    ///
    /// <param name="lists">The input sequence of lists.</param>
    ///
    /// <returns>The resulting concatenated list.</returns>
    /// 
    /// <example id="concat-example-1">
    /// <code lang="fsharp">
    /// let input = [ [1;2]
    ///               [3;4;5]
    ///               [6;7;8;9] ]
    /// input |> List.concat  // evaluates [1; 2; 3; 4; 5; 6; 7; 8; 9]
    /// </code>
    /// </example>
    [<CompiledName("Concat")>]
    val concat: lists:seq<'T list> -> 'T list
    
    /// <summary>Tests if the list contains the specified element.</summary>
    ///
    /// <param name="value">The value to locate in the input list.</param>
    /// <param name="source">The input list.</param>
    ///
    /// <returns>True if the input list contains the specified element; false otherwise.</returns>
    /// 
    /// <example id="contains-example-1">
    /// <code lang="fsharp">
    /// [1..9] |> List.contains 0
    /// </code>
    /// Evaluates to <c>false</c>.
    /// </example>
    /// 
    /// <example id="contains-example-2">
    /// <code lang="fsharp">
    /// [1..9] |> List.contains 3
    /// </code>
    /// Evaluates to <c>true</c>.
    /// </example>
    /// 
    /// <example id="contains-example-3">
    /// <code lang="fsharp">
    /// let input = [1, "SpongeBob"; 2, "Patrick"; 3, "Squidward"; 4, "Mr. Krabs"]
    ///
    /// input |> List.contains (2, "Patrick")
    /// </code>
    /// Evaluates to <c>true</c>.
    /// </example>
    /// 
    /// <example id="contains-example-4">
    /// <code lang="fsharp">
    /// let input = [1, "SpongeBob"; 2, "Patrick"; 3, "Squidward"; 4, "Mr. Krabs"]
    ///
    /// input |> List.contains (22, "Patrick")
    /// </code>
    /// Evaluates to <c>false</c>.
    /// </example>
    [<CompiledName("Contains")>]
    val inline contains: value:'T -> source:'T list -> bool when 'T : equality

    /// <summary>Returns a list that contains no duplicate entries according to generic hash and
    /// equality comparisons on the entries.
    /// If an element occurs multiple times in the list then the later occurrences are discarded.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example id="distinct-example-1">
    /// <code lang="fsharp">
    /// let input = [6;1;2;3;1;4;5;5]
    /// input |> List.distinct
    /// </code>
    /// Evaluates to <c>[6; 1; 2; 3; 4; 5]</c>.
    /// </example>
    [<CompiledName("Distinct")>]
    val distinct: list:'T list -> 'T list when 'T : equality

    /// <summary>Returns a list that contains no duplicate entries according to the 
    /// generic hash and equality comparisons on the keys returned by the given key-generating function.
    /// If an element occurs multiple times in the list then the later occurrences are discarded.</summary>
    ///
    /// <param name="projection">A function transforming the list items into comparable keys.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example id="distinctBy-example-1">
    /// <code lang="fsharp">
    /// let isEven x = 0 = x % 2
    /// let input = [6;1;2;3;1;4;5;5]
    /// input |> List.distinctBy isEven  // evaluates [6; 1]
    /// </code>
    /// </example>
    [<CompiledName("DistinctBy")>]
    val distinctBy: projection:('T -> 'Key) -> list:'T list -> 'T list when 'Key : equality

    /// <summary>Applies a key-generating function to each element of a list and returns a list yielding unique
    /// keys and their number of occurrences in the original list.</summary>
    ///
    /// <param name="projection">A function transforming each item of the input list into a key to be
    /// compared against the others.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example id="countBy-example-1"> Counting the number of occurrences of chars
    /// <code lang="fsharp">
    /// let input = ['H'; 'a'; 'p'; 'p'; 'y']
    ///
    /// input |> List.countBy id
    /// </code>
    /// Evaluates <c>[('H', 1); ('a', 1); ('p', 2); ('y', 1)]</c>
    /// </example>
    [<CompiledName("CountBy")>]
    val countBy : projection:('T -> 'Key) -> list:'T list -> ('Key * int) list when 'Key : equality

    /// <summary>Splits the input list into at most <c>count</c> chunks.</summary>
    ///
    /// <param name="count">The maximum number of chunks.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list split into chunks.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when <c>count</c> is not positive.</exception>
    /// 
    /// <example id="splitInto-example-1">
    /// <code lang="fsharp">
    /// [1..10] |> List.splitInto 2
    /// </code>
    /// Evaluates to <c>[[1; 2; 3; 4; 5]; [6; 7; 8; 9; 10]]</c>.
    /// </example>
    /// 
    /// <example id="splitInto-example-2">
    /// <code lang="fsharp">
    /// [1..10] |> List.splitInto 4
    /// </code>
    /// Evaluates to <c>[[1; 2; 3]; [4; 5; 6]; [7; 8]; [9; 10]]</c>.
    /// </example>
    [<CompiledName("SplitInto")>]
    val splitInto: count:int -> list:'T list -> 'T list list

    /// <summary>Returns an empty list of the given type.</summary>
    [<GeneralizableValue>]
    [<CompiledName("Empty")>]
    val empty<'T> : 'T list

    /// <summary>Returns a new list with the distinct elements of the input list which do not appear in the itemsToExclude sequence,
    /// using generic hash and equality comparisons to compare values.</summary>
    ///
    /// <param name="itemsToExclude">A sequence whose elements that also occur in the input list will cause those elements to be
    /// removed from the result.</param>
    /// <param name="list">A list whose elements that are not also in itemsToExclude will be returned.</param>
    ///
    /// <returns>A list that contains the distinct elements of <c>list</c> that do not appear in <c>itemsToExclude</c>.</returns>
    ///
    /// <exception cref="T:System.ArgumentNullException">Thrown when itemsToExclude is null.</exception>
    /// 
    /// <example id="except-example-1">
    /// <code lang="fsharp">
    /// let input = [1, "Kirk"; 2, "Spock"; 3, "Kenobi"] 
    ///
    /// input |> List.except [3, "Kenobi"]
    /// </code>
    /// Evaluates to <c>[(1, "Kirk"); (2, "Spock")]</c>.
    /// </example>
    /// 
    /// <example id="except-example-2">
    /// <code lang="fsharp">
    /// [0..10] |> List.except [1..5]  // evaluates [0; 6; 7; 8; 9; 10]
    /// </code>
    /// </example>
    /// 
    /// <example id="except-example-3">
    /// <code lang="fsharp">
    /// [1..5] |> List.except [0..10]  // evaluates []
    /// </code>
    /// </example>
    [<CompiledName("Except")>]
    val except: itemsToExclude:seq<'T> -> list:'T list -> 'T list when 'T : equality

    /// <summary>Returns the only element of the list.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The only element of the list.</returns>
    ///        
    /// <exception cref="T:System.ArgumentException">Thrown when the input does not have precisely one element.</exception>
    /// 
    /// <example id="exactlyOne-example-1">
    /// <code lang="fsharp">
    /// ["the chosen one"] |> List.exactlyOne // evaluates "the chosen one"
    /// </code>
    /// </example>
    /// 
    /// <example id="exactlyOne-example-2">
    /// <code lang="fsharp">
    /// let input : string list = []
    /// input |> List.exactlyOne
    /// </code>
    /// Will throw the exception: <c>System.ArgumentException: The input sequence was empty</c>
    /// </example>
    /// 
    /// <example id="exactlyOne-example-3">
    /// <code lang="fsharp">
    /// [1..5] |> List.exactlyOne
    /// </code>
    /// Will throw the exception: <c>System.ArgumentException: The input sequence contains more than one element</c>
    /// </example>
    [<CompiledName("ExactlyOne")>]
    val exactlyOne: list:'T list -> 'T

    /// <summary>Returns the only element of the list or <c>None</c> if it is empty or contains more than one element.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The only element of the list or None.</returns>
    /// 
    /// <example id="tryExactlyOne-example-1">
    /// <code lang="fsharp">
    /// [1] |> List.tryExactlyOne               // evaluates Some 1
    /// [1;2] |> List.tryExactlyOne             // evaluates None
    /// ([] : int list) |> List.tryExactlyOne   // evaluates None
    /// </code>
    /// </example>
    [<CompiledName("TryExactlyOne")>]
    val tryExactlyOne: list:'T list -> 'T option

    /// <summary>Tests if any element of the list satisfies the given predicate.</summary>
    ///
    /// <remarks>The predicate is applied to the elements of the input list. If any application 
    /// returns true then the overall result is true and no further elements are tested. 
    /// Otherwise, false is returned.</remarks>
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>True if any element satisfies the predicate.</returns>
    /// 
    /// <example id="exists-example-1">
    /// <code lang="fsharp">
    /// let input = [1, "Kirk"; 2, "Spock"; 3, "Kenobi"] 
    /// 
    /// input |> List.exists (fun x -> x = (3, "Kenobi"))  // evaluates true
    /// 
    /// input |> List.exists (fun (n, name) -> n > 5)      // evaluates false
    /// </code>
    /// </example>
    [<CompiledName("Exists")>]
    val exists: predicate:('T -> bool) -> list:'T list -> bool

    /// <summary>Tests if any pair of corresponding elements of the lists satisfies the given predicate.</summary>
    ///
    /// <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
    /// two lengths of the collections. If any application returns true then the overall result is 
    /// true and no further elements are tested. Otherwise, if one collections is longer 
    /// than the other then the <see cref="T:System.ArgumentException"/> exception is raised. 
    /// Otherwise, false is returned.</remarks>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the input lists differ in length.</exception>
    ///
    /// <returns>True if any pair of elements satisfy the predicate.</returns>
    /// 
    /// <example id="exists2-example-1"> Check if the sum of pairs (from 2 different lists) have at least one even number
    /// <code lang="fsharp">
    /// let anEvenSum a b  = 0 = (a + b) % 2
    /// 
    /// ([1..4], [2..5]) 
    /// ||> List.exists2 anEvenSum     // evaluates false
    /// 
    /// ([1..4], [2;4;5;6])
    /// ||> List.exists2 anEvenSum   // evaluates true
    /// </code>
    /// </example>
    [<CompiledName("Exists2")>]
    val exists2: predicate:('T1 -> 'T2 -> bool) -> list1:'T1 list -> list2:'T2 list -> bool

    /// <summary>Returns the first element for which the given function returns True.
    /// Raises <c>KeyNotFoundException</c> if no such element exists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the predicate evaluates to false for
    /// all the elements of the list.</exception>
    ///
    /// <returns>The first element that satisfies the predicate.</returns>
    /// 
    /// <example id="find-example-1">
    /// <code lang="fsharp">
    /// let isEven x  = 0 = x % 2
    /// let isGreaterThan x y = y > x
    /// let input = [1, "Luke"; 2, "Kirk"; 3, "Spock"; 4, "Kenobi"]
    /// 
    /// input |> List.find (fun (x,_) -> isEven x)              // evaluates (2, "Kirk")
    /// input |> List.find (fun (x,_) -> x |> isGreaterThan 6)  // raises an exception
    /// </code>
    /// </example>
    [<CompiledName("Find")>]
    val find: predicate:('T -> bool) -> list:'T list -> 'T

    /// <summary>Returns the last element for which the given function returns True.
    /// Raises <c>KeyNotFoundException</c> if no such element exists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the predicate evaluates to false for
    /// all the elements of the list.</exception>
    ///
    /// <returns>The last element that satisfies the predicate.</returns>
    /// 
    /// <example id="findBack-example-1">
    /// <code lang="fsharp">
    /// let isEven x  = 0 = x % 2
    /// let isGreaterThan x y = y > x
    /// let input = [1, "Luke"; 2, "Kirk"; 3, "Spock"; 4, "Kenobi"]
    /// 
    /// input |> List.findBack (fun (x,_) -> isEven x)              // evaluates (4, "Kenobi")
    /// input |> List.findBack (fun (x,_) -> x |> isGreaterThan 6)  // raises an exception
    /// </code>
    /// </example>
    [<CompiledName("FindBack")>]
    val findBack: predicate:('T -> bool) -> list:'T list -> 'T

    /// <summary>Returns the index of the first element in the list
    /// that satisfies the given predicate.
    /// Raises <c>KeyNotFoundException</c> if no such element exists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown if the predicate evaluates to false for all the
    /// elements of the list.</exception>
    ///
    /// <returns>The index of the first element that satisfies the predicate.</returns>
    /// 
    /// <example id="findIndex-example-1">
    /// <code lang="fsharp">
    /// let isEven x  = 0 = x % 2
    /// let isGreaterThan x y = y > x
    /// let input = [1, "Luke"; 2, "Kirk"; 3, "Spock"; 4, "Kenobi"]
    /// 
    /// input |> List.findIndex (fun (x,_) -> isEven x)              // evaluates 1
    /// input |> List.findIndex (fun (x,_) -> x |> isGreaterThan 6)  // raises an exception
    /// </code>
    /// </example>
    [<CompiledName("FindIndex")>]
    val findIndex: predicate:('T -> bool) -> list:'T list -> int

    /// <summary>Returns the index of the last element in the list
    /// that satisfies the given predicate.
    /// Raises <c>KeyNotFoundException</c> if no such element exists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown if the predicate evaluates to false for all the
    /// elements of the list.</exception>
    ///
    /// <returns>The index of the last element that satisfies the predicate.</returns>
    /// 
    /// <example id="findIndexBack-example-1">
    /// <code lang="fsharp">
    /// let isEven x  = 0 = x % 2
    /// let isGreaterThan x y = y > x
    /// let input = [1, "Luke"; 2, "Kirk"; 3, "Spock"; 4, "Kenobi"]
    /// 
    /// input |> List.findIndexBack (fun (x,_) -> isEven x)              // evaluates 3
    /// input |> List.findIndexBack (fun (x,_) -> x |> isGreaterThan 6)  // raises an exception
    /// </code>
    /// </example>
    [<CompiledName("FindIndexBack")>]
    val findIndexBack: predicate:('T -> bool) -> list:'T list -> int

    /// <summary>Returns a new collection containing only the elements of the collection
    /// for which the given predicate returns "true"</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>A list containing only the elements that satisfy the predicate.</returns>
    /// 
    /// <example id="filter-example-1">
    /// <code lang="fsharp">
    /// let input = [1, "Luke"; 2, "Kirk"; 3, "Kenobi"; 4, "Spock"]
    /// let isComingFromStarTrek (x,_) = isEven x
    /// 
    /// input |> List.filter isComingFromStarTrek
    /// </code>
    /// Evaluates to <c>[(2, "Kirk"); (4, "Spock")]</c>
    /// </example>
    [<CompiledName("Filter")>]
    val filter: predicate:('T -> bool) -> list:'T list -> 'T list

    /// <summary>Applies a function to each element of the collection, threading an accumulator argument
    /// through the computation. Take the second argument, and apply the function to it
    /// and the first element of the list. Then feed this result into the function along
    /// with the second element and so on. Return the final result.
    /// If the input function is <c>f</c> and the elements are <c>i0...iN</c> then 
    /// computes <c>f (... (f s i0) i1 ...) iN</c>.</summary>
    ///
    /// <param name="folder">The function to update the state given the input elements.</param>
    /// <param name="state">The initial state.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The final state value.</returns>
    /// 
    /// <example id="fold-example-1"> Making the sum of squares for the first 5 natural numbers
    /// <code lang="fsharp">
    /// (0, [1..5]) ||> List.fold (fun s v -> s + v * v)  // evaluates 55
    /// </code>
    /// </example>
    /// 
    /// <example id="fold-example-2"> Shopping for fruits hungry, you tend to take more of each as the hunger grows
    /// <code lang="fsharp">
    /// type Fruit = Apple | Pear | Orange
    /// type BagItem = { fruit: Fruit; quantity: int }
    /// let takeMore (previous: BagItem list) fruit = 
    ///     let toTakeThisTime = 
    ///         match previous with 
    ///         | bagItem :: otherBagItems -> bagItem.quantity + 1 
    ///         | [] -> 1 
    ///     { fruit = fruit; quantity = toTakeThisTime } :: previous
    /// let input = [ Apple; Pear; Orange ]
    /// 
    /// ([], input) ||> List.fold takeMore
    /// </code>
    /// Evaluates to
    /// <code>
    ///  [{ fruit = Orange; quantity = 3 }
    ///   { fruit = Pear; quantity = 2 }
    ///   { fruit = Apple; quantity = 1 }]
    /// </code>
    /// </example>
    [<CompiledName("Fold")>]
    val fold<'T,'State> : folder:('State -> 'T -> 'State) -> state:'State -> list:'T list -> 'State

    /// <summary>Applies a function to corresponding elements of two collections, threading an accumulator argument
    /// through the computation. The collections must have identical sizes.
    /// If the input function is <c>f</c> and the elements are <c>i0...iN</c> and <c>j0...jN</c>
    /// then computes <c>f (... (f s i0 j0)...) iN jN</c>.</summary>
    ///
    /// <param name="folder">The function to update the state given the input elements.</param>
    /// <param name="state">The initial state.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    ///
    /// <returns>The final state value.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Fold2")>]
    val fold2<'T1,'T2,'State> : folder:('State -> 'T1 -> 'T2 -> 'State) -> state:'State -> list1:'T1 list -> list2:'T2 list -> 'State

    /// <summary>Applies a function to each element of the collection, starting from the end, threading an accumulator argument
    /// through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then 
    /// computes <c>f i0 (...(f iN s))</c>.</summary>
    ///
    /// <param name="folder">The function to update the state given the input elements.</param>
    /// <param name="list">The input list.</param>
    /// <param name="state">The initial state.</param>
    ///
    /// <returns>The state object after the folding function is applied to each element of the list.</returns>
    /// 
    /// <example id="foldBack-example-1"> Making the sum of squares for the first 5 natural numbers
    /// <code lang="fsharp">
    /// ([1..5], 0) ||> List.foldBack (fun v s -> s + v * v)  // evaluates 55
    /// </code>
    /// </example>
    /// 
    /// <example id="foldBack-example-2"> Shopping for fruits hungry, you tend to take more of each as the hunger grows
    /// <code lang="fsharp">
    /// type Fruit = Apple | Pear | Orange
    /// type BagItem = { fruit: Fruit; quantity: int }
    /// let takeMore fruit (previous: BagItem list) =
    ///     let toTakeThisTime = 
    ///         match previous with 
    ///         | bagItem :: otherBagItems -> bagItem.quantity + 1 
    ///         | [] -> 1 
    ///     { fruit = fruit; quantity = toTakeThisTime } :: previous
    /// let input = [ Apple; Pear; Orange ]
    /// 
    /// (input, []) ||> List.foldBack takeMore
    /// </code>
    /// Evaluates to
    /// <code>
    ///  [{ fruit = Apple; quantity = 3 }
    ///   { fruit = Pear; quantity = 2 }
    ///   { fruit = Orange; quantity = 1 }]
    /// </code>
    /// </example>
    [<CompiledName("FoldBack")>]
    val foldBack<'T,'State> : folder:('T -> 'State -> 'State) -> list:'T list -> state:'State -> 'State

    /// <summary>Applies a function to corresponding elements of two collections, threading an accumulator argument
    /// through the computation. The collections must have identical sizes.
    /// If the input function is <c>f</c> and the elements are <c>i0...iN</c> and <c>j0...jN</c>
    /// then computes <c>f i0 j0 (...(f iN jN s))</c>.</summary>
    ///
    /// <param name="folder">The function to update the state given the input elements.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    /// <param name="state">The initial state.</param>
    ///
    /// <returns>The final state value.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("FoldBack2")>]
    val foldBack2<'T1,'T2,'State> : folder:('T1 -> 'T2 -> 'State -> 'State) -> list1:'T1 list -> list2:'T2 list -> state:'State -> 'State

    /// <summary>Tests if all elements of the collection satisfy the given predicate.</summary>
    ///
    /// <remarks>The predicate is applied to the elements of the input list. If any application 
    /// returns false then the overall result is false and no further elements are tested. 
    /// Otherwise, true is returned.</remarks>
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>True if all of the elements satisfy the predicate.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("ForAll")>]
    val forall: predicate:('T -> bool) -> list:'T list -> bool

    /// <summary>Tests if all corresponding elements of the collection satisfy the given predicate pairwise.</summary>
    ///
    /// <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
    /// two lengths of the collections. If any application returns false then the overall result is 
    /// false and no further elements are tested. Otherwise, if one collection is longer 
    /// than the other then the <see cref="T:System.ArgumentException"/> exception is raised. 
    /// Otherwise, true is returned.</remarks>
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the input lists differ in length.</exception>
    ///
    /// <returns>True if all of the pairs of elements satisfy the predicate.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("ForAll2")>]
    val forall2: predicate:('T1 -> 'T2 -> bool) -> list1:'T1 list -> list2:'T2 list -> bool

    /// <summary>Applies a key-generating function to each element of a list and yields a list of 
    /// unique keys. Each unique key contains a list of all elements that match 
    /// to this key.</summary>
    ///
    /// <param name="projection">A function that transforms an element of the list into a comparable key.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("GroupBy")>]
    val groupBy : projection:('T -> 'Key) -> list:'T list -> ('Key * 'T list) list when 'Key : equality

    /// <summary>Returns the first element of the list.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The first element of the list.</returns>
    [<CompiledName("Head")>]
    val head: list:'T list -> 'T

    /// <summary>Returns a new list whose elements are the corresponding elements
    /// of the input list paired with the index (from 0) of each element.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list of indexed elements.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Indexed")>]
    val indexed: list:'T list -> (int * 'T) list

    /// <summary>Creates a list by calling the given generator on each index.</summary>
    ///
    /// <param name="length">The length of the list to generate.</param>
    /// <param name="initializer">The function to generate an element from an index.</param>
    ///
    /// <returns>The list of generated elements.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Initialize")>]
    val init: length:int -> initializer:(int -> 'T) -> 'T list

    /// <summary>Returns true if the list contains no elements, false otherwise.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>True if the list is empty.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("IsEmpty")>]
    val isEmpty: list:'T list -> bool

    /// <summary>Indexes into the list. The first element has index 0.</summary>
    ///
    /// <param name="index">The index to retrieve.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The value at the given index.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the index is negative or the input list does not contain enough elements.</exception>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Item")>]
    val item: index:int -> list:'T list -> 'T

    /// <summary>Applies the given function to each element of the collection.</summary>
    ///
    /// <param name="action">The function to apply to elements from the input list.</param>
    /// <param name="list">The input list.</param>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Iterate")>]
    val inline iter: action:('T -> unit) -> list:'T list -> unit

    /// <summary>Applies the given function to two collections simultaneously. The
    /// collections must have identical size.</summary>
    ///
    /// <param name="action">The function to apply to pairs of elements from the input lists.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Iterate2")>]
    val iter2: action:('T1 -> 'T2 -> unit) -> list1:'T1 list -> list2:'T2 list -> unit

    /// <summary>Applies the given function to each element of the collection. The integer passed to the
    /// function indicates the index of element.</summary>
    ///
    /// <param name="action">The function to apply to the elements of the list along with their index.</param>
    /// <param name="list">The input list.</param>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("IterateIndexed")>]
    val inline iteri: action:(int -> 'T -> unit) -> list:'T list -> unit

    /// <summary>Applies the given function to two collections simultaneously. The
    /// collections must have identical size. The integer passed to the
    /// function indicates the index of element.</summary>
    ///
    /// <param name="action">The function to apply to a pair of elements from the input lists along with their index.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("IterateIndexed2")>]
    val iteri2: action:(int -> 'T1 -> 'T2 -> unit) -> list1:'T1 list -> list2:'T2 list -> unit

    /// <summary>Returns the last element of the list.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The last element of the list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the input does not have any elements.</exception>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Last")>]
    val last: list:'T list -> 'T

    /// <summary>Returns the length of the list.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The length of the list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Length")>]
    val length: list:'T list -> int

    /// <summary>Returns the last element of the list.
    /// Return <c>None</c> if no such element exists.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The last element of the list or None.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("TryLast")>]
    val tryLast: list:'T list -> 'T option

    /// <summary>Builds a new collection whose elements are the results of applying the given function
    /// to each of the elements of the collection.</summary>
    ///
    /// <param name="mapping">The function to transform elements from the input list.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list of transformed elements.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Map")>]
    val map: mapping:('T -> 'U) -> list:'T list -> 'U list

    /// <summary>Builds a new collection whose elements are the results of applying the given function
    /// to the corresponding elements of the two collections pairwise.</summary>
    ///
    /// <param name="mapping">The function to transform pairs of elements from the input lists.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    ///
    /// <returns>The list of transformed elements.</returns>
    ///
    /// <example id="item-1">
    /// <code lang="fsharp">
    /// let inputs1 = ["a"; "bad"; "good"]
    /// let inputs2 = [0; 2; 1]
    ///
    /// (inputs1, inputs2) ||> List.map2 (fun x y -> x.[y])
    /// </code>
    /// Evaluates to <c>seq ['a'; 'd'; 'o']</c>
    /// </example>
    [<CompiledName("Map2")>]
    val map2: mapping:('T1 -> 'T2 -> 'U) -> list1:'T1 list -> list2:'T2 list -> 'U list

    /// <summary>Builds a new collection whose elements are the results of applying the given function
    /// to the corresponding elements of the three collections simultaneously.</summary>
    ///
    /// <param name="mapping">The function to transform triples of elements from the input lists.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    /// <param name="list3">The third input list.</param>
    ///
    /// <returns>The list of transformed elements.</returns>
    ///
    /// <example id="item-1">
    /// <code lang="fsharp">
    /// let inputs1 = [ "a"; "t"; "ti" ]
    /// let inputs2 = [ "l"; "h"; "m" ]
    /// let inputs3 = [ "l"; "e"; "e" ]
    ///
    /// (inputs1, inputs2, inputs3) |||> List.map3 (fun x y z -> x + y + z)
    /// </code>
    /// Evaluates to <c>[ "all"; "the"; "time" ]</c>
    /// </example>
    /// 
    [<CompiledName("Map3")>]
    val map3: mapping:('T1 -> 'T2 -> 'T3 -> 'U) -> list1:'T1 list -> list2:'T2 list -> list3:'T3 list -> 'U list

    /// <summary>Combines map and fold. Builds a new list whose elements are the results of applying the given function
    /// to each of the elements of the input list. The function is also used to accumulate a final value.</summary>
    ///
    /// <param name="mapping">The function to transform elements from the input list and accumulate the final value.</param>
    /// <param name="state">The initial state.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list of transformed elements, and the final accumulated value.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("MapFold")>]
    val mapFold<'T,'State,'Result> : mapping:('State -> 'T -> 'Result * 'State) -> state:'State -> list:'T list -> 'Result list * 'State

    /// <summary>Combines map and foldBack. Builds a new list whose elements are the results of applying the given function
    /// to each of the elements of the input list. The function is also used to accumulate a final value.</summary>
    ///
    /// <param name="mapping">The function to transform elements from the input list and accumulate the final value.</param>
    /// <param name="list">The input list.</param>
    /// <param name="state">The initial state.</param>
    ///
    /// <returns>The list of transformed elements, and the final accumulated value.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("MapFoldBack")>]
    val mapFoldBack<'T,'State,'Result> : mapping:('T -> 'State -> 'Result * 'State) -> list:'T list -> state:'State -> 'Result list * 'State

    /// <summary>Builds a new collection whose elements are the results of applying the given function
    /// to each of the elements of the collection. The integer index passed to the
    /// function indicates the index (from 0) of element being transformed.</summary>
    ///
    /// <param name="mapping">The function to transform elements and their indices.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list of transformed elements.</returns>
    ///
    /// <example id="item-1">
    /// <code lang="fsharp">
    /// let inputs = [ 10; 10; 10 ]
    ///
    /// inputs |> List.mapi (fun i x -> i + x)
    /// </code>
    /// Evaluates to <c>[ 10; 11; 12 ]</c>
    /// </example>
    [<CompiledName("MapIndexed")>]
    val mapi: mapping:(int -> 'T -> 'U) -> list:'T list -> 'U list

    /// <summary>Like mapi, but mapping corresponding elements from two lists of equal length.</summary>
    ///
    /// <param name="mapping">The function to transform pairs of elements from the two lists and their index.</param>
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    ///
    /// <returns>The list of transformed elements.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("MapIndexed2")>]
    val mapi2: mapping:(int -> 'T1 -> 'T2 -> 'U) -> list1:'T1 list -> list2:'T2 list -> 'U list

    /// <summary>Return the greatest of all elements of the list, compared via Operators.max.</summary>
    ///
    /// <remarks>Raises <see cref="T:System.ArgumentException"/> if <c>list</c> is empty</remarks>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The maximum element.</returns>
    ///
    /// <example id="max-1">
    /// <code lang="fsharp">
    /// let inputs = [ 10; 12; 11 ]
    ///
    /// inputs |> List.max
    /// </code>
    /// Evaluates to <c>12</c>
    /// </example>
    ///
    /// <example id="max-2">
    /// <code lang="fsharp">
    /// let inputs = [ ]
    ///
    /// inputs |> List.max
    /// </code>
    /// Throws <c>System.ArgumentException</c>.
    /// </example>
    [<CompiledName("Max")>]
    val inline max: list:'T list -> 'T when 'T : comparison 

    /// <summary>Returns the greatest of all elements of the list, compared via Operators.max on the function result.</summary>
    ///
    /// <remarks>Raises <see cref="T:System.ArgumentException"/> if <c>list</c> is empty.</remarks>
    /// <param name="projection">The function to transform the list elements into the type to be compared.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The maximum element.</returns>
    ///
    /// <example id="maxby-1">
    /// <code lang="fsharp">
    /// let inputs = ["aaa"; "b"; "cccc"]
    ///
    /// inputs |> List.maxBy (fun s -> s.Length)
    /// </code>
    /// Evaluates to <c>"cccc"</c>
    /// </example>
    ///
    /// <example id="maxby-2">
    /// <code lang="fsharp">
    /// let inputs = []
    ///
    /// inputs |> List.maxBy (fun (s: string) -> s.Length)
    /// </code>
    /// Throws <c>System.ArgumentException</c>.
    /// </example>
    [<CompiledName("MaxBy")>]
    val inline maxBy: projection:('T -> 'U) -> list:'T list -> 'T when 'U : comparison 

    /// <summary>Returns the lowest of all elements of the list, compared via Operators.min.</summary>
    ///
    /// <remarks>Raises <see cref="T:System.ArgumentException"/> if <c>list</c> is empty</remarks>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The minimum value.</returns>
    ///
    /// <example id="min-1">
    /// <code lang="fsharp">
    /// let inputs = [10; 12; 11]
    ///
    /// inputs |> List.min
    /// </code>
    /// Evaluates to <c>10</c>
    /// </example>
    ///
    /// <example id="min-2">
    /// <code lang="fsharp">
    /// let inputs = []
    ///
    /// inputs |> List.min
    /// </code>
    /// Throws <c>System.ArgumentException</c>.
    /// </example>
    [<CompiledName("Min")>]
    val inline min: list:'T list -> 'T when 'T : comparison 

    /// <summary>Returns the lowest of all elements of the list, compared via Operators.min on the function result</summary>
    ///
    /// <remarks>Raises <see cref="T:System.ArgumentException"/> if <c>list</c> is empty.</remarks>
    /// <param name="projection">The function to transform list elements into the type to be compared.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The minimum value.</returns>
    ///
    /// <example id="minby-1">
    /// <code lang="fsharp">
    /// let inputs = ["aaa"; "b"; "cccc"]
    ///
    /// inputs |> List.minBy (fun s -> s.Length)
    /// </code>
    /// Evaluates to <c>"b"</c>
    /// </example>
    ///
    /// <example id="minby-2">
    /// <code lang="fsharp">
    /// let inputs = []
    ///
    /// inputs |> List.minBy (fun (s: string) -> s.Length)
    /// </code>
    /// Throws <c>System.ArgumentException</c>.
    /// </example>
    [<CompiledName("MinBy")>]
    val inline minBy   : projection:('T -> 'U) -> list:'T list -> 'T when 'U : comparison 

    /// <summary>Indexes into the list. The first element has index 0.</summary>
    ///
    /// <param name="list">The input list.</param>
    /// <param name="index">The index to retrieve.</param>
    ///
    /// <returns>The value at the given index.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the index is negative or the input list does not contain enough elements.</exception>
    [<CompiledName("Get")>]
    [<Obsolete("please use List.item")>]
    val nth: list:'T list -> index:int -> 'T

    /// <summary>Builds a list from the given array.</summary>
    ///
    /// <param name="array">The input array.</param>
    ///
    /// <returns>The list of elements from the array.</returns>
    /// 
    /// <example id="oflist-1">
    /// <code lang="fsharp">
    /// let inputs = [| 1; 2; 5 |]
    ///
    /// inputs |> List.ofArray
    /// </code>
    /// Evaluates to <c>[ 1; 2; 5 ]</c>.
    /// </example>
    [<CompiledName("OfArray")>]
    val ofArray : array:'T[] -> 'T list

    /// <summary>Builds a new list from the given enumerable object.</summary>
    ///
    /// <param name="source">The input sequence.</param>
    ///
    /// <returns>The list of elements from the sequence.</returns>
    /// 
    /// <example id="oflist-1">
    /// <code lang="fsharp">
    /// let inputs = seq { 1; 2; 5 }
    ///
    /// inputs |> List.ofSeq    
    /// </code>
    /// Evaluates to <c>[ 1; 2; 5 ]</c>.
    /// </example>
    [<CompiledName("OfSeq")>]
    val ofSeq: source:seq<'T> -> 'T list

    /// <summary>Returns a list of each element in the input list and its predecessor, with the
    /// exception of the first element which is only returned as the predecessor of the second element.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Pairwise")>]
    val pairwise: list:'T list -> ('T * 'T) list

    /// <summary>Splits the collection into two collections, containing the 
    /// elements for which the given predicate returns True and False
    /// respectively. Element order is preserved in both of the created lists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>A list containing the elements for which the predicate evaluated to true and a list
    /// containing the elements for which the predicate evaluated to false.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Partition")>]
    val partition: predicate:('T -> bool) -> list:'T list -> ('T list * 'T list)

    /// <summary>Applies the given function to successive elements, returning the first
    /// result where function returns <c>Some(x)</c> for some x. If no such
    /// element exists then raise <see cref="T:System.Collections.Generic.KeyNotFoundException"/></summary>
    ///
    /// <param name="chooser">The function to generate options from the elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The first resulting value.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Pick")>]
    val pick: chooser:('T -> 'U option) -> list:'T list -> 'U

    /// <summary>Returns a list with all elements permuted according to the
    /// specified permutation.</summary>
    ///
    /// <param name="indexMap">The function to map input indices to output indices.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The permuted list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when indexMap does not produce a valid permutation.</exception>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Permute")>]
    val permute : indexMap:(int -> int) -> list:'T list -> 'T list

    /// <summary>Apply a function to each element of the collection, threading an accumulator argument
    /// through the computation. Apply the function to the first two elements of the list.
    /// Then feed this result into the function along with the third element and so on. 
    /// Return the final result. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
    /// <c>f (... (f i0 i1) i2 ...) iN</c>.</summary>
    ///
    /// <remarks>Raises <see cref="T:System.ArgumentException"/> if <c>list</c> is empty</remarks>
    ///
    /// <param name="reduction">The function to reduce two list elements to a single element.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The final reduced value.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Reduce")>]
    val reduce: reduction:('T -> 'T -> 'T) -> list:'T list -> 'T

    /// <summary>Applies a function to each element of the collection, starting from the end, threading an accumulator argument
    /// through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
    /// <c>f i0 (...(f iN-1 iN))</c>.</summary>
    ///
    /// <param name="reduction">A function that takes in the next-to-last element of the list and the
    /// current accumulated result to produce the next accumulated result.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The final result of the reductions.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("ReduceBack")>]
    val reduceBack: reduction:('T -> 'T -> 'T) -> list:'T list -> 'T

    /// <summary>Creates a list by replicating the given initial value.</summary>
    ///
    /// <param name="count">The number of elements to replicate.</param>
    /// <param name="initial">The value to replicate</param>
    ///
    /// <returns>The generated list.</returns>
    /// 
    /// <example id="replicate-1">
    /// <code lang="fsharp">
    /// List.replicate 3 "a"
    /// </code>
    /// Evaluates to <c>[ "a"; "a"; "a" ]</c>.
    /// </example>
    [<CompiledName("Replicate")>]
    val replicate: count:int -> initial:'T -> 'T list

    /// <summary>Returns a new list with the elements in reverse order.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The reversed list.</returns>
    /// 
    /// <example id="rev-1">
    /// <code lang="fsharp">
    /// let inputs = [ 0; 1; 2 ]
    ///
    /// inputs |> List.rev
    /// </code>
    /// Evaluates to <c>[ 2; 1; 0 ]</c>.
    /// </example>
    [<CompiledName("Reverse")>]
    val rev: list:'T list -> 'T list

    /// <summary>Applies a function to each element of the collection, threading an accumulator argument
    /// through the computation. Take the second argument, and apply the function to it
    /// and the first element of the list. Then feed this result into the function along
    /// with the second element and so on. Returns the list of intermediate results and the final result.</summary>
    ///
    /// <param name="folder">The function to update the state given the input elements.</param>
    /// <param name="state">The initial state.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list of states.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Scan")>]
    val scan<'T,'State>  : folder:('State -> 'T -> 'State) -> state:'State -> list:'T list -> 'State list

    /// <summary>Like <c>foldBack</c>, but returns both the intermediary and final results</summary>
    ///
    /// <param name="folder">The function to update the state given the input elements.</param>
    /// <param name="list">The input list.</param>
    /// <param name="state">The initial state.</param>
    ///
    /// <returns>The list of states.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("ScanBack")>]
    val scanBack<'T,'State> : folder:('T -> 'State -> 'State) -> list:'T list -> state:'State -> 'State list

    /// <summary>Returns a list that contains one item only.</summary>
    ///
    /// <param name="value">The input item.</param>
    ///
    /// <returns>The result list of one item.</returns>
    /// 
    /// <example id="singleton-1">
    /// <code lang="fsharp">
    /// List.singleton 7
    /// </code>
    /// Evaluates to <c>[ 7 ]</c>.
    /// </example>
    [<CompiledName("Singleton")>]
    val inline singleton: value:'T -> 'T list

    /// <summary>Returns the list after removing the first N elements.</summary>
    ///
    /// <param name="count">The number of elements to skip. If the number is 0 or negative the input list is returned.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The list after removing the first N elements.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when count exceeds the number of 
    /// elements in the list.</exception>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Skip")>]
    val skip: count:int -> list: 'T list -> 'T list

    /// <summary>Bypasses elements in a list while the given predicate returns True, and then returns
    /// the remaining elements of the list.</summary>
    ///
    /// <param name="predicate">A function that evaluates an element of the list to a boolean value.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("SkipWhile")>]
    val skipWhile: predicate:('T -> bool) -> list:'T list -> 'T list

    /// <summary>Sorts the given list using the given comparison function.</summary>
    ///
    /// <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
    /// <param name="comparer">The function to compare the list elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The sorted list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("SortWith")>]
    val sortWith: comparer:('T -> 'T -> int) -> list:'T list -> 'T list 

    /// <summary>Sorts the given list using keys given by the given projection. Keys are compared using <see cref="M:Microsoft.FSharp.Core.Operators.compare"/>.</summary>
    ///
    /// <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
    /// <param name="projection">The function to transform the list elements into the type to be compared.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The sorted list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("SortBy")>]
    val sortBy: projection:('T -> 'Key) -> list:'T list -> 'T list when 'Key : comparison

    /// <summary>Sorts the given list using <see cref="M:Microsoft.FSharp.Core.Operators.compare"/>.</summary>
    ///
    /// <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The sorted list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Sort")>]
    val sort: list:'T list -> 'T list when 'T : comparison

    /// <summary>Splits a list into two lists, at the given index.</summary>
    ///
    /// <param name="index">The index at which the list is split.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The two split lists.</returns>
    ///
    /// <exception cref="T:System.InvalidOperationException">Thrown when split index exceeds the number of elements
    /// in the list.</exception>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("SplitAt")>]
    val splitAt: index:int -> list:'T list -> ('T list * 'T list)

    /// <summary>Sorts the given list in descending order using keys given by the given projection. Keys are compared using <see cref="M:Microsoft.FSharp.Core.Operators.compare"/>.</summary>
    ///
    /// <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
    /// <param name="projection">The function to transform the list elements into the type to be compared.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The sorted list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("SortByDescending")>]
    val inline sortByDescending: projection:('T -> 'Key) -> list:'T list -> 'T list when 'Key : comparison

    /// <summary>Sorts the given list in descending order using <see cref="M:Microsoft.FSharp.Core.Operators.compare"/>.</summary>
    ///
    /// <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The sorted list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("SortDescending")>]
    val inline sortDescending: list:'T list -> 'T list when 'T : comparison

    /// <summary>Returns the sum of the elements in the list.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The resulting sum.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Sum")>]
    val inline sum   : list:^T list -> ^T 
                               when ^T : (static member (+) : ^T * ^T -> ^T) 
                               and  ^T : (static member Zero : ^T)

    /// <summary>Returns the sum of the results generated by applying the function to each element of the list.</summary>
    ///
    /// <param name="projection">The function to transform the list elements into the type to be summed.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The resulting sum.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("SumBy")>]
    val inline sumBy : projection:('T -> ^U) -> list:'T list -> ^U 
                               when ^U : (static member (+) : ^U * ^U -> ^U) 
                               and  ^U : (static member Zero : ^U)

    /// <summary>Returns the list after removing the first element.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the list is empty.</exception>
    ///
    /// <returns>The list after removing the first element.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Tail")>]
    val tail: list:'T list -> 'T list

    /// <summary>Returns the first N elements of the list.</summary>
    /// <remarks>Throws <c>InvalidOperationException</c>
    /// if the count exceeds the number of elements in the list. <c>List.truncate</c>
    /// returns as many items as the list contains instead of throwing an exception.</remarks>
    ///
    /// <param name="count">The number of items to take.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when the input list is empty.</exception>
    /// <exception cref="T:System.InvalidOperationException">Thrown when count exceeds the number of elements
    /// in the list.</exception>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Take")>]
    val take: count:int -> list:'T list -> 'T list

    /// <summary>Returns a list that contains all elements of the original list while the 
    /// given predicate returns True, and then returns no further elements.</summary>
    ///
    /// <param name="predicate">A function that evaluates to false when no more items should be returned.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("TakeWhile")>]
    val takeWhile: predicate:('T -> bool) -> list:'T list -> 'T list

    /// <summary>Builds an array from the given list.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The array containing the elements of the list.</returns>
    ///
    /// <example id="toarray-1">
    /// <code lang="fsharp">
    /// let inputs = [ 1; 2; 5 ]
    ///
    /// inputs |> List.toArray
    /// </code>
    /// Evaluates to <c>[| 1; 2; 5 |]</c>.
    /// </example>
    [<CompiledName("ToArray")>]
    val toArray: list:'T list -> 'T[]

    /// <summary>Views the given list as a sequence.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The sequence of elements in the list.</returns>
    ///
    /// <example id="toseq-1">
    /// <code lang="fsharp">
    /// let inputs = [ 1; 2; 5 ]
    ///
    /// inputs |> List.toSeq
    /// </code>
    /// Evaluates to <c>seq { 1; 2; 5 }</c>.
    /// </example>
    [<CompiledName("ToSeq")>]
    val toSeq: list:'T list -> seq<'T>

    /// <summary>Returns the first element of the list, or
    /// <c>None</c> if the list is empty.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The first element of the list or None.</returns>
    ///
    /// <example id="try-head-1">
    /// <code lang="fsharp">
    /// let inputs = [ "banana"; "pear" ]
    ///
    /// inputs |> List.tryHead
    /// </code>
    /// Evaluates to <c>Some "banana"</c>
    /// </example>
    ///
    /// <example id="try-head-2">
    /// <code lang="fsharp">
    /// let inputs : int list = []
    ///
    /// inputs |> List.tryHead
    /// </code>
    /// Evaluates to <c>None</c>
    /// </example>
    [<CompiledName("TryHead")>]
    val tryHead: list:'T list -> 'T option

    /// <summary>Returns the transpose of the given sequence of lists.</summary>
    ///
    /// <param name="lists">The input sequence of list.</param>
    ///
    /// <returns>The transposed list.</returns>
    ///
    /// <exception cref="T:System.ArgumentNullException">Thrown when the input sequence is null.</exception>
    /// <exception cref="T:System.ArgumentException">Thrown when the input lists differ in length.</exception>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Transpose")>]
    val transpose: lists:seq<'T list> -> 'T list list

    /// <summary>Returns at most N elements in a new list.</summary>
    ///
    /// <param name="count">The maximum number of items to return.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Truncate")>]
    val truncate: count:int -> list:'T list -> 'T list

    /// <summary>Applies the given function to successive elements, returning <c>Some(x)</c> the first
    /// result where function returns <c>Some(x)</c> for some x. If no such element 
    /// exists then return <c>None</c>.</summary>
    ///
    /// <param name="chooser">The function to generate options from the elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The first resulting value or None.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("TryPick")>]
    val tryPick: chooser:('T -> 'U option) -> list:'T list -> 'U option

    /// <summary>Returns the first element for which the given function returns True.
    /// Return None if no such element exists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The first element for which the predicate returns true, or None if
    /// every element evaluates to false.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("TryFind")>]
    val tryFind: predicate:('T -> bool) -> list:'T list -> 'T option

    /// <summary>Returns the last element for which the given function returns True.
    /// Return None if no such element exists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The last element for which the predicate returns true, or None if
    /// every element evaluates to false.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("TryFindBack")>]
    val tryFindBack: predicate:('T -> bool) -> list:'T list -> 'T option

    /// <summary>Returns the index of the first element in the list
    /// that satisfies the given predicate.
    /// Return <c>None</c> if no such element exists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The index of the first element for which the predicate returns true, or None if
    /// every element evaluates to false.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("TryFindIndex")>]
    val tryFindIndex: predicate:('T -> bool) -> list:'T list -> int option

    /// <summary>Tries to find the nth element in the list.
    /// Returns <c>None</c> if index is negative or the list does not contain enough elements.</summary>
    ///
    /// <param name="index">The index to retrieve.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The value at the given index or <c>None</c>.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("TryItem")>]
    val tryItem: index:int -> list:'T list -> 'T option

    /// <summary>Returns the index of the last element in the list
    /// that satisfies the given predicate.
    /// Return <c>None</c> if no such element exists.</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The index of the last element for which the predicate returns true, or None if
    /// every element evaluates to false.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("TryFindIndexBack")>]
    val tryFindIndexBack: predicate:('T -> bool) -> list:'T list -> int option

    /// <summary>Returns a list that contains the elements generated by the given computation.
    /// The given initial <c>state</c> argument is passed to the element generator.</summary>
    ///
    /// <param name="generator">A function that takes in the current state and returns an option tuple of the next
    /// element of the list and the next state value.</param>
    /// <param name="state">The initial state value.</param>
    ///
    /// <returns>The result list.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Unfold")>]
    val unfold<'T,'State> : generator:('State -> ('T * 'State) option) -> state:'State -> 'T list

    /// <summary>Splits a list of pairs into two lists.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>Two lists of split elements.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Unzip")>]
    val unzip: list:('T1 * 'T2) list -> ('T1 list * 'T2 list)

    /// <summary>Splits a list of triples into three lists.</summary>
    ///
    /// <param name="list">The input list.</param>
    ///
    /// <returns>Three lists of split elements.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Unzip3")>]
    val unzip3: list:('T1 * 'T2 * 'T3) list -> ('T1 list * 'T2 list * 'T3 list)
    
    /// <summary>Returns a new list containing only the elements of the list
    /// for which the given predicate returns "true"</summary>
    ///
    /// <param name="predicate">The function to test the input elements.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>A list containing only the elements that satisfy the predicate.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Where")>]
    val where: predicate:('T -> bool) -> list:'T list -> 'T list

    /// <summary>Returns a list of sliding windows containing elements drawn from the input
    /// list. Each window is returned as a fresh list.</summary>
    ///
    /// <param name="windowSize">The number of elements in each window.</param>
    /// <param name="list">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when windowSize is not positive.</exception>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Windowed")>]
    val windowed : windowSize:int -> list:'T list -> 'T list list

    /// <summary>Combines the two lists into a list of pairs. The two lists must have equal lengths.</summary>
    ///
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    ///
    /// <returns>A single list containing pairs of matching elements from the input lists.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Zip")>]
    val zip: list1:'T1 list -> list2:'T2 list -> ('T1 * 'T2) list

    /// <summary>Combines the three lists into a list of triples. The lists must have equal lengths.</summary>
    ///
    /// <param name="list1">The first input list.</param>
    /// <param name="list2">The second input list.</param>
    /// <param name="list3">The third input list.</param>
    ///
    /// <returns>A single list containing triples of matching elements from the input lists.</returns>
    /// 
    /// <example-tbd></example-tbd>
    [<CompiledName("Zip3")>]
    val zip3: list1:'T1 list -> list2:'T2 list -> list3:'T3 list -> ('T1 * 'T2 * 'T3) list
    
    /// <summary>Return a new list with the item at a given index removed.</summary>
    ///
    /// <param name="index">The index of the item to be removed.</param>
    /// <param name="source">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when index is outside 0..source.Length - 1</exception>
    ///
    /// <example id="removeAt-example-1">
    /// <code>
    /// let inputs = [ 0; 1; 2 ]
    ///
    /// inputs |> List.removeAt 1
    /// </code>
    /// let inputs = [ 0; 2 ]
    /// </example>
    [<CompiledName("RemoveAt")>]
    val removeAt: index: int -> source: 'T list -> 'T list

    /// <summary>Return a new list with the number of items starting at a given index removed.</summary>
    ///
    /// <param name="index">The index of the item to be removed.</param>
    /// <param name="count">The number of items to remove.</param>
    /// <param name="source">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when index is outside 0..source.Length - count</exception>
    ///
    /// <example id="removeManyAt-example-1">
    /// <code>
    /// let inputs = [ 0; 1; 2; 3 ]
    ///
    /// inputs |> List.removeManyAt 1 2
    /// </code>
    /// Evaluates to <c>[ 0; 3 ]</c>.
    /// </example>
    [<CompiledName("RemoveManyAt")>]
    val removeManyAt: index: int -> count: int -> source: 'T list -> 'T list

    /// <summary>Return a new list with the item at a given index set to the new value.</summary>
    ///
    /// <param name="index">The index of the item to be replaced.</param>
    /// <param name="value">The new value.</param>
    /// <param name="source">The input list.</param>
    ///
    /// <returns>The result list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when index is outside 0..source.Length - 1</exception>
    ///
    /// <example id="updateAt-example-1">
    /// <code>
    /// let inputs = [ 0; 1; 2 ]
    ///
    /// inputs |> List.updateAt 1 9
    /// </code>
    /// Evaluates to <c>[ 0; 9; 2 ]</c>.
    /// </example>
    [<CompiledName("UpdateAt")>]
    val updateAt: index: int -> value: 'T -> source: 'T list -> 'T list

    /// <summary>Return a new list with a new item inserted before the given index.</summary>
    ///
    /// <param name="index">The index where the item should be inserted.</param>
    /// <param name="value">The value to insert.</param>
    /// <param name="source">The input list.</param>
    /// 
    /// <returns>The result list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when index is below 0 or greater than source.Length.</exception>
    ///
    /// <example id="insertAt-example-1">
    /// <code>
    /// let inputs = [ 0; 1; 2 ]
    ///
    /// inputs |> List.insertAt 1 9
    /// </code>
    /// Evaluates to <c>[ 0; 9; 1; 2 ]</c>.
    /// </example>
    [<CompiledName("InsertAt")>]
    val insertAt: index: int -> value: 'T -> source: 'T list -> 'T list
    
    /// <summary>Return a new list with new items inserted before the given index.</summary>
    ///
    /// <param name="index">The index where the items should be inserted.</param>
    /// <param name="values">The values to insert.</param>
    /// <param name="source">The input list.</param>
    /// 
    /// <returns>The result list.</returns>
    ///
    /// <exception cref="T:System.ArgumentException">Thrown when index is below 0 or greater than source.Length.</exception>
    ///
    /// <example id="insertManyAt-example-1">
    /// <code>
    /// let inputs = [ 0; 1; 2 ]
    ///
    /// inputs |> List.insertManyAt 1 [ 8; 9 ]
    /// Evaluates to <c>[ 0; 8; 9; 1; 2 ]</c>.
    /// </code>
    /// </example>
    [<CompiledName("InsertManyAt")>]
    val insertManyAt: index: int -> values: seq<'T> -> source: 'T list -> 'T list
