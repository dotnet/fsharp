// Copyright (c) Microsoft Corporation.  All Rights Reserved.  See License.txt in the project root for license information.

{

module internal FSharp.Compiler.PPLexer

open System

open FSharp.Compiler.ErrorLogger
open FSharp.Compiler.Lexhelp
open FSharp.Compiler.ParseHelpers
open FSharp.Compiler.Syntax

open Internal.Utilities.Text.Lexing

let lexeme (lexbuf : UnicodeLexing.Lexbuf) = UnicodeLexing.Lexbuf.LexemeString lexbuf

let fail (args : LexArgs) (lexbuf:UnicodeLexing.Lexbuf) e =
     let m = lexbuf.LexemeRange
     args.errorLogger.ErrorR(Error(e,m))
     PPParser.EOF
}

let letter              = '\Lu' | '\Ll' | '\Lt' | '\Lm' | '\Lo' | '\Nl'
let digit               = '\Nd'
let connecting_char     = '\Pc'
let combining_char      = '\Mn' | '\Mc'
let formatting_char     = '\Cf'

let ident_start_char    =
    letter | '_'

let ident_char =
    letter
  | connecting_char
  | combining_char
  | formatting_char
  | digit
  | ['\'']

let ident       = ident_start_char ident_char*
let comment     = "//" _*
let mcomment    = "(*" _*
let whitespace  = [' ' '\t']

rule tokenstream args = parse
// --------------------------
| "#if"         { PPParser.PRELUDE                                              }
| "#elif"       { PPParser.PRELUDE                                              }
| ident         { PPParser.ID(lexeme lexbuf)                                    }
// --------------------------
| "!"           { PPParser.OP_NOT                                               }
| "&&"          { PPParser.OP_AND                                               }
| "||"          { PPParser.OP_OR                                                }
| "("           { PPParser.LPAREN                                               }
| ")"           { PPParser.RPAREN                                               }
// --------------------------
| whitespace    { tokenstream args lexbuf                                       }
// --------------------------
| comment       { PPParser.EOF                                                  }
| mcomment      { fail args lexbuf (FSComp.SR.pplexExpectedSingleLineComment()) }
| _             {
                    let lex = lexeme lexbuf
                    let _   = rest lexbuf
                    fail args lexbuf (FSComp.SR.pplexUnexpectedChar(lex))
                }
| eof           { PPParser.EOF                                                  }
// --------------------------
and rest = parse
| _             { rest lexbuf   }
| eof           { ()            }
